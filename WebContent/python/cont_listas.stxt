Document (globalcampus.site/namespace.stxt): Listas
	
	Content: 
	Header: Listas en Python
	
	Content:
	    
	    Las listas en Python son uno de los tipos de datos más versátiles y utilizados. Son contenedores ordenados y mutables que pueden almacenar elementos de diferentes tipos. A continuación, se detallan las características, métodos y usos comunes de las listas en Python.
	    
	Header: Creación de Listas
	
	Content:
	    
	    Las listas se crean usando corchetes ```[]```.
	    
	    Ejemplo:
	Code:
	    mi_lista = [1, 2, 3, 4]
	
	
	Content:
	    
	    También se pueden crear listas vacías:
	Code:
	    lista_vacia = []
	
	
	Content:
	    
	Header: Acceso a Elementos
	
	Content:
	    
	    Los elementos de una lista se pueden acceder mediante índices, comenzando desde 0.
	    
	    Ejemplo:
	Code:
	    primer_elemento = mi_lista[0]
	    segundo_elemento = mi_lista[1]
	
	
	Content:
	    
	    Para acceder a los elementos desde el final, se pueden usar índices negativos.
	    
	    Ejemplo:
	Code:
	    ultimo_elemento = mi_lista[-1]
	    penultimo_elemento = mi_lista[-2]
	
	
	Content:
	    
	Header: Modificación de Elementos
	
	Content:
	    
	    Las listas son mutables, lo que significa que se pueden cambiar sus elementos después de la creación.
	    
	    Ejemplo:
	Code:
	    mi_lista[1] = 20 # Modifica el segundo elemento
	
	
	Content:
	    
	Header: Añadir Elementos
	
	Content:
	    
	    *  **```append```**: Añade un elemento al final de la lista.
	Code:
	    mi_lista.append(5)
	
	
	Content:
	    
	    *  **```insert```**: Inserta un elemento en una posición específica.
	Code:
	    mi_lista.insert(1, 15) # Inserta 15 en la posición 1
	
	
	Content:
	    
	    *  **```extend```**: Añade múltiples elementos al final de la lista.
	Code:
	    mi_lista.extend([6, 7])
	
	
	Content:
	    
	Header: Eliminar Elementos
	
	Content:
	    
	    *  **```remove```**: Elimina la primera ocurrencia de un valor.
	Code:
	    mi_lista.remove(3)
	
	
	Content:
	    
	    *  **```pop```**: Elimina y devuelve un elemento en una posición específica.
	Code:
	    elemento = mi_lista.pop(1) # Elimina y devuelve el elemento en la posición 1
	
	
	Content:
	    
	    *  **```clear```**: Elimina todos los elementos de la lista.
	Code:
	    mi_lista.clear()
	
	
	Content:
	    
	Header: Operaciones con Listas
	
	Content:
	    
	    *  **Concatenación**: Se pueden concatenar listas usando el operador ```+```.
	Code:
	    lista1 = [1, 2]
	    lista2 = [3, 4]
	    lista_concatenada = lista1 + lista2 # [1, 2, 3, 4]
	
	
	Content:
	    
	    *  **Repetición**: Se pueden repetir los elementos de una lista usando el operador ``````.
	Code:
	    lista_repetida = lista1  3 # [1, 2, 1, 2, 1, 2]
	
	
	Content:
	    
	    *  **Comprobación de Membresía**: Se puede verificar si un elemento está en una lista usando ```in```.
	Code:
	    existe = 3 in mi_lista
	
	
	Content:
	    
	Header: Métodos de Listas
	
	Content:
	    
	    *  **```sort```**: Ordena los elementos de la lista.
	Code:
	    mi_lista.sort()
	
	
	Content:
	    
	    *  **```reverse```**: Invierte el orden de los elementos de la lista.
	Code:
	    mi_lista.reverse()
	
	
	Content:
	    
	    *  **```index```**: Devuelve el índice de la primera ocurrencia de un valor.
	Code:
	    indice = mi_lista.index(20)
	
	
	Content:
	    
	    *  **```count```**: Devuelve el número de ocurrencias de un valor.
	Code:
	    contador = mi_lista.count(20)
	
	
	Content:
	    
	Header: Comprensión de Listas
	
	Content:
	    
	    La comprensión de listas es una forma concisa de crear listas.
	    
	    Ejemplo:
	Code:
	    cuadrados = [x**2 for x in range(10)]
	
	
	Content:
	    
	    Esto crea una lista de los cuadrados de los números del 0 al 9.
	    
	Header: Iteración sobre Listas
	
	Content:
	    
	    Se puede iterar sobre los elementos de una lista usando un bucle ```for```.
	Code:
	    for elemento in mi_lista:
	    print(elemento)
	
	
	Content:
	    
	Header: Copiar Listas
	
	Content:
	    
	    Para copiar una lista, se puede usar el método ```copy``` o la notación de rebanado.
	    
	    Ejemplo con ```copy```:
	Code:
	    lista_copiada = mi_lista.copy()
	
	
	Content:
	    
	    Ejemplo con rebanado:
	Code:
	    lista_copiada = mi_lista[:]
	
	
	Content:

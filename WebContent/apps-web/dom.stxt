Document (globalcampus.site/namespace.stxt): Manipulación del DOM con JavaScript
	
	Text: 
	    JavaScript permite interactuar y manipular el Document Object Model (DOM) de una página web. El DOM es una representación estructurada del documento HTML, donde cada elemento es un objeto que puede ser accedido y modificado con JavaScript.
	    
	Header: Seleccionar Elementos del DOM
	
	Text:
	    
	    Para manipular los elementos del DOM, primero necesitas seleccionarlos. JavaScript ofrece varios métodos para hacerlo:
	    
	    *  getElementById: Selecciona un elemento por su ID. Ejemplo: ```document.getElementById("miID")```.
	    *  getElementsByClassName: Selecciona todos los elementos que tienen una clase específica. Ejemplo: ```document.getElementsByClassName("miClase")```.
	    *  getElementsByTagName: Selecciona todos los elementos de un tipo específico. Ejemplo: ```document.getElementsByTagName("div")```.
	    *  querySelector: Selecciona el primer elemento que coincide con un selector CSS. Ejemplo: ```document.querySelector(".miClase")```.
	    *  querySelectorAll: Selecciona todos los elementos que coinciden con un selector CSS. Ejemplo: ```document.querySelectorAll("p")```.
	    
	    Ejemplo de selección de elementos:
	    
	Code:
	    var miElemento = document.getElementById("miID");
	    var misElementos = document.getElementsByClassName("miClase");
	    var todosLosDivs = document.getElementsByTagName("div");
	    var primerElemento = document.querySelector(".miClase");
	    var todosLosParrafos = document.querySelectorAll("p");
	
	
	Text:
	    
	Header: Modificar Contenido y Atributos
	
	Text:
	    
	    Una vez seleccionados los elementos, puedes modificar su contenido y atributos. Aquí tienes algunos ejemplos:
	    
	    *  Modificar el contenido de texto: Usando ```innerText``` o ```textContent```. Ejemplo: ```miElemento.innerText = "Nuevo contenido";```.
	    *  Modificar el contenido HTML: Usando ```innerHTML```. Ejemplo: ```miElemento.innerHTML = "<b>Texto en negrita</b>";```.
	    *  Modificar atributos: Usando ```setAttribute``` y ```getAttribute```. Ejemplo: ```miElemento.setAttribute("class", "nuevaClase");```.
	    
	    Ejemplo de modificación:
	    
	Code:
	    var miElemento = document.getElementById("miID");
	    miElemento.innerText = "Nuevo contenido";
	    
	    var miEnlace = document.querySelector("a");
	    miEnlace.setAttribute("href", "https://www.nuevo-enlace.com");
	
	
	Text:
	    
	Header: Manipulación de Estilos
	
	Text:
	    
	    Puedes cambiar los estilos de un elemento directamente mediante la propiedad ```style```. Ejemplo:
	    
	Code:
	    miElemento.style.color = "blue";
	    miElemento.style.backgroundColor = "lightgray";
	
	
	Text:
	    
	    Para agregar o quitar clases CSS, puedes usar:
	    
	    *  classList.add: Añade una clase. Ejemplo: ```miElemento.classList.add("nuevaClase");```.
	    *  classList.remove: Elimina una clase. Ejemplo: ```miElemento.classList.remove("miClase");```.
	    *  classList.toggle: Alterna una clase. Ejemplo: ```miElemento.classList.toggle("otraClase");```.
	    
	    Ejemplo de manipulación de clases:
	    
	Code:
	    miElemento.classList.add("nuevaClase");
	    miElemento.classList.remove("miClase");
	    miElemento.classList.toggle("otraClase");
	
	
	Text:
	    
	Header: Eventos
	
	Text:
	    
	    Los eventos permiten que JavaScript responda a las interacciones del usuario, como clics, movimientos del ratón, y pulsaciones de teclas. Puedes agregar manejadores de eventos usando ```addEventListener```.
	    
	    Ejemplo de manejo de eventos:
	    
	Code:
	    miElemento.addEventListener("click", function() {
	    alert("Elemento clickeado!");
	    });
	    
	    var miBoton = document.getElementById("miBoton");
	    miBoton.addEventListener("mouseover", function() {
	    miBoton.style.backgroundColor = "yellow";
	    });
	
	
	Text:
	    
	Header: Crear y Eliminar Elementos
	
	Text:
	    
	    Puedes crear nuevos elementos y agregarlos al DOM usando métodos como ```createElement``` y ```appendChild```.
	    
	    Ejemplo de creación de elementos:
	    
	Code:
	    var nuevoParrafo = document.createElement("p");
	    nuevoParrafo.innerText = "Este es un nuevo párrafo";
	    
	    var contenedor = document.getElementById("contenedor");
	    contenedor.appendChild(nuevoParrafo);
	
	
	Text:
	    
	    Para eliminar elementos, puedes usar ```removeChild```.
	    
	    Ejemplo de eliminación de elementos:
	    
	Code:
	    var elementoAEliminar = document.getElementById("miID");
	    elementoAEliminar.parentNode.removeChild(elementoAEliminar);
	
	
	Text:
	    
	Header: Conclusión
	
	Text:
	    
	    La manipulación del DOM con JavaScript es una habilidad esencial para los desarrolladores web, ya que permite crear interacciones dinámicas y mejorar la experiencia del usuario. Con una comprensión sólida de cómo seleccionar, modificar y manejar eventos en el DOM, puedes construir aplicaciones web interactivas y atractivas.

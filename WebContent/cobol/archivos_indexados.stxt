Tema(www.cursos.com/tema.stxt):

	h1: Trabajo con archivos indexados
	
	Text: 
	    En COBOL, los archivos indexados permiten el acceso rápido a registros mediante el uso de claves. Este tipo de archivos es útil cuando se necesita acceder a datos de manera no secuencial o buscar registros específicos. A continuación, se detallan los conceptos y operaciones básicas para trabajar con archivos indexados en COBOL.
	    
	h2: Definición de la División de Archivo para archivos indexados
	
	Text:
	    
	    La División de Archivo en COBOL se utiliza para definir los archivos indexados, especificando la clave primaria y cualquier clave secundaria.
	    
	h3: Ejemplo de definición de archivo indexado
	
	Text:
	    
	Code:
	    FILE CONTROL.
	    SELECT Clientes ASSIGN TO 'CLIENTES.DAT'
	    ORGANIZATION IS INDEXED
	    ACCESS MODE IS DYNAMIC
	    RECORD KEY IS Cliente-ID
	    ALTERNATE RECORD KEY IS Cliente-Nombre WITH DUPLICATES.
	    
	    DATA DIVISION.
	    FILE SECTION.
	    FD Clientes.
	    01 Registro-Cliente.
	    05 Cliente-ID PIC 9(5).
	    05 Cliente-Nombre PIC X(30).
	    05 Cliente-Direccion PIC X(50).
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```SELECT Clientes ASSIGN TO 'CLIENTES.DAT'``` define el archivo lógico y lo asigna a un archivo físico.
	    *  ```ORGANIZATION IS INDEXED``` indica que el archivo es indexado.
	    *  ```ACCESS MODE IS DYNAMIC``` permite el acceso tanto secuencial como aleatorio.
	    *  ```RECORD KEY IS Cliente-ID``` define la clave primaria.
	    *  ```ALTERNATE RECORD KEY IS Cliente-Nombre WITH DUPLICATES``` define una clave secundaria permitiendo duplicados.
	    
	h2: Apertura y cierre de archivos indexados
	
	Text:
	    
	    Los archivos indexados deben ser abiertos y cerrados adecuadamente utilizando las sentencias ```OPEN``` y ```CLOSE```.
	    
	h3: Ejemplo de apertura y cierre de archivos indexados
	
	Text:
	    
	Code:
	    PROCEDURE DIVISION.
	    OPEN I-O Clientes.
	    IF WS-File-Status NOT = '00'
	    DISPLAY 'Error abriendo archivo: ' WS-File-Status.
	    END-IF.
	    
	    CLOSE Clientes.
	    STOP RUN.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```OPEN I-O Clientes``` abre el archivo para operaciones de entrada y salida.
	    *  Se verifica ```WS-File-Status``` para manejar errores al abrir el archivo.
	    *  ```CLOSE Clientes``` cierra el archivo al finalizar.
	    
	h2: Lectura de registros en archivos indexados
	
	Text:
	    
	    La lectura de registros en archivos indexados se puede hacer de manera secuencial o aleatoria. Para acceso aleatorio, se utiliza la sentencia ```READ``` con la clave de registro.
	    
	h3: Ejemplo de lectura secuencial y aleatoria
	
	Text:
	    
	Code:
	    PROCEDURE DIVISION.
	    Lectura-Secuencial.
	    READ Clientes NEXT RECORD INTO Registro-Cliente
	    AT END SET Fin-De-Archivo TO TRUE
	    NOT AT END
	    DISPLAY Cliente-ID Cliente-Nombre Cliente-Direccion
	    END-READ
	    PERFORM UNTIL Fin-De-Archivo
	    READ Clientes NEXT RECORD INTO Registro-Cliente
	    AT END SET Fin-De-Archivo TO TRUE
	    NOT AT END
	    DISPLAY Cliente-ID Cliente-Nombre Cliente-Direccion
	    END-READ
	    END-PERFORM.
	    
	    Lectura-Aleatoria.
	    MOVE 12345 TO Cliente-ID.
	    READ Clientes INTO Registro-Cliente KEY IS Cliente-ID
	    INVALID KEY
	    DISPLAY 'Cliente no encontrado'
	    NOT INVALID KEY
	    DISPLAY Cliente-ID Cliente-Nombre Cliente-Direccion
	    END-READ.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```READ Clientes NEXT RECORD INTO Registro-Cliente``` lee el siguiente registro en orden secuencial.
	    *  ```READ Clientes INTO Registro-Cliente KEY IS Cliente-ID``` lee un registro específico usando la clave primaria.
	    *  ```INVALID KEY``` maneja la situación en la que un registro no se encuentra.
	    
	h2: Escritura y actualización de registros en archivos indexados
	
	Text:
	    
	    Para escribir y actualizar registros en archivos indexados, se utilizan las sentencias ```WRITE``` y ```REWRITE```.
	    
	h3: Ejemplo de escritura y actualización de registros
	
	Text:
	    
	Code:
	    PROCEDURE DIVISION.
	    Escribir-Registro.
	    MOVE 12345 TO Cliente-ID.
	    MOVE 'Juan Pérez' TO Cliente-Nombre.
	    MOVE 'Calle Falsa 123' TO Cliente-Direccion.
	    WRITE Registro-Cliente.
	    IF WS-File-Status NOT = '00'
	    DISPLAY 'Error escribiendo registro: ' WS-File-Status.
	    END-IF.
	    
	    Actualizar-Registro.
	    MOVE 'Avenida Siempre Viva 742' TO Cliente-Direccion.
	    REWRITE Registro-Cliente.
	    IF WS-File-Status NOT = '00'
	    DISPLAY 'Error actualizando registro: ' WS-File-Status.
	    END-IF.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```WRITE Registro-Cliente``` escribe un nuevo registro en el archivo.
	    *  ```REWRITE Registro-Cliente``` actualiza el registro actual en el archivo.
	    *  Se verifica ```WS-File-Status``` para manejar errores durante las operaciones.
	    
	h2: Eliminación de registros en archivos indexados
	
	Text:
	    
	    La eliminación de registros se realiza utilizando la sentencia ```DELETE```.
	    
	h3: Ejemplo de eliminación de registros
	
	Text:
	    
	Code:
	    PROCEDURE DIVISION.
	    Eliminar-Registro.
	    MOVE 12345 TO Cliente-ID.
	    DELETE Clientes RECORD KEY IS Cliente-ID.
	    IF WS-File-Status NOT = '00'
	    DISPLAY 'Error eliminando registro: ' WS-File-Status.
	    END-IF.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```DELETE Clientes RECORD KEY IS Cliente-ID``` elimina el registro con la clave especificada.
	    *  Se verifica ```WS-File-Status``` para manejar errores durante la eliminación.
	    
	h2: Manejo de errores en operaciones con archivos indexados
	
	Text:
	    
	    Es importante capturar y manejar los posibles errores durante las operaciones con archivos indexados utilizando ```FILE STATUS```.
	    
	h3: Ejemplo de manejo de errores con FILE STATUS
	
	Text:
	    
	Code:
	    FILE CONTROL.
	    SELECT Clientes ASSIGN TO 'CLIENTES.DAT'
	    ORGANIZATION IS INDEXED
	    ACCESS MODE IS DYNAMIC
	    RECORD KEY IS Cliente-ID
	    FILE STATUS IS WS-File-Status.
	    
	    WORKING-STORAGE SECTION.
	    01 WS-File-Status PIC XX.
	    
	    PROCEDURE DIVISION.
	    OPEN I-O Clientes.
	    IF WS-File-Status NOT = '00'
	    DISPLAY 'Error abriendo archivo: ' WS-File-Status.
	    END-IF.
	    CLOSE Clientes.
	    STOP RUN.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```FILE STATUS IS WS-File-Status``` define una variable para capturar el estado del archivo.
	    *  Se verifica ```WS-File-Status``` para manejar errores en las operaciones de archivo.
	    
	h2: Conclusión
	
	Text:
	    
	    El trabajo con archivos indexados en COBOL permite una gestión eficiente y rápida de datos mediante el uso de claves. Comprender cómo definir, abrir, cerrar, leer, escribir, actualizar y eliminar registros, así como manejar errores, es esencial para desarrollar aplicaciones COBOL robustas y eficientes.

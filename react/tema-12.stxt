Document (globalcampus.site/namespace.stxt): Usando Context API
	Navigation:
		Previous: Anterior (tema-11)
		Next: Siguiente (tema-13)
		
	Header: Introducción
	Subheader: ¿Qué es Context API?
	Content:
		Context API es una característica de React que permite compartir datos entre componentes sin necesidad de pasar props manualmente en cada nivel de la jerarquía de componentes. Es especialmente útil para gestionar datos globales como la autenticación del usuario, la configuración de la aplicación o temas visuales.

	Header: Creación de un Contexto
	Subheader: Cómo Crear un Contexto en React
	Content:
		Para utilizar Context API, primero se debe crear un contexto utilizando la función `React.createContext`. Esta función devuelve un objeto con dos componentes clave: `Provider` y `Consumer`.
	Code:
		// Ejemplo básico de creación de un contexto
		const TemaContexto = React.createContext('claro');

		function App() {
			return (
				<TemaContexto.Provider value="oscuro">
					<ComponenteHijo />
				</TemaContexto.Provider>
			);
		}

	Content:
		En este ejemplo, se crea un contexto `TemaContexto` con un valor predeterminado de "claro". El `Provider` envuelve los componentes que deben acceder a este contexto y establece el valor del contexto en "oscuro".

	Header: Uso del Provider y Consumer
	Subheader: Uso de Provider
	Content:
		El `Provider` es un componente que hace disponible el contexto a todos los componentes hijos que están dentro de él. Recibe un `value` como prop, que representa el valor que se compartirá en el contexto.
	Code:
		// Ejemplo de uso del Provider
		function App() {
			return (
				<TemaContexto.Provider value="oscuro">
					<ComponenteHijo />
				</TemaContexto.Provider>
			);
		}

	Content:
		El `Provider` envuelve `ComponenteHijo`, lo que significa que cualquier componente dentro de `ComponenteHijo` puede acceder al valor "oscuro" del contexto `TemaContexto`.

	Subheader: Uso de Consumer
	Content:
		El `Consumer` es un componente que consume el valor del contexto. Se utiliza dentro de los componentes que necesitan acceder al contexto.
	Code:
		// Ejemplo de uso del Consumer
		function ComponenteHijo() {
			return (
				<TemaContexto.Consumer>
					{(tema) => <p>El tema actual es: {tema}</p>}
				</TemaContexto.Consumer>
			);
		}

	Content:
		En este ejemplo, `ComponenteHijo` utiliza `TemaContexto.Consumer` para acceder al valor del contexto y renderizar un párrafo que muestra el tema actual.

	Header: Uso de useContext Hook
	Subheader: Accediendo al Contexto con useContext
	Content:
		En componentes funcionales, el hook `useContext` proporciona una forma más sencilla y directa de acceder al contexto sin necesidad de utilizar un `Consumer`.
	Code:
		// Ejemplo de uso de useContext en un componente funcional
		function ComponenteHijo() {
			const tema = useContext(TemaContexto);
			return <p>El tema actual es: {tema}</p>;
		}

	Content:
		Este ejemplo muestra cómo `useContext` simplifica el acceso al contexto al obtener directamente el valor del contexto sin necesidad de envolverlo en un `Consumer`.

	Header: Ejemplos Prácticos de Context API
	Subheader: Manejo de Autenticación con Context API
	Content:
		Context API es útil para manejar el estado de autenticación en una aplicación. Por ejemplo, puedes crear un contexto para compartir información sobre el usuario autenticado en toda la aplicación.
	Code:
		// Ejemplo de contexto de autenticación
		const AuthContext = React.createContext(null);

		function App() {
			const [usuario, setUsuario] = useState({ nombre: 'Juan' });

			return (
				<AuthContext.Provider value={usuario}>
					<PerfilUsuario />
				</AuthContext.Provider>
			);
		}

		function PerfilUsuario() {
			const usuario = useContext(AuthContext);
			return <p>Bienvenido, {usuario.nombre}</p>;
		}

	Content:
		En este ejemplo, el contexto `AuthContext` almacena la información del usuario autenticado y está disponible para todos los componentes hijos, permitiendo que el componente `PerfilUsuario` muestre el nombre del usuario sin necesidad de pasar props.

	Subheader: Cambiando el Tema de la Aplicación con Context API
	Content:
		Otro uso común de Context API es manejar el tema de la aplicación, permitiendo cambiar entre modos claro y oscuro de manera sencilla.
	Code:
		// Ejemplo de cambio de tema con Context API
		const TemaContexto = React.createContext();

		function App() {
			const [tema, setTema] = useState('claro');

			function alternarTema() {
				setTema((temaActual) => (temaActual === 'claro' ? 'oscuro' : 'claro'));
			}

			return (
				<TemaContexto.Provider value={tema}>
					<button onClick={alternarTema}>Alternar Tema</button>
					<Contenido />
				</TemaContexto.Provider>
			);
		}

		function Contenido() {
			const tema = useContext(TemaContexto);
			return <div className={`tema-${tema}`}>El tema actual es {tema}</div>;
		}

	Content:
		En este ejemplo, `TemaContexto` maneja el tema de la aplicación. El botón "Alternar Tema" permite cambiar entre los temas "claro" y "oscuro", afectando a todos los componentes que consumen este contexto.

	Header: Buenas Prácticas con Context API
	Subheader: Uso Racional de Context API
	Content:
		* **Evita el uso excesivo:** No utilices Context API para todo; es mejor para datos que necesitan ser globalmente accesibles.
		* **Mantén la simplicidad:** Intenta mantener los contextos simples y enfocados en una tarea específica.
		* **Composición de contextos:** Si necesitas múltiples contextos, considera envolver varios `Provider` en un solo componente para reducir el anidamiento excesivo.

	Header: Conclusión
	Subheader: Resumen sobre Context API
	Content:
		Context API es una herramienta poderosa en React para manejar datos que deben ser accesibles en toda la aplicación sin necesidad de pasar props manualmente a través de múltiples niveles de componentes. Aunque es una alternativa ligera a Redux para ciertas situaciones, su uso debe ser racionalizado para evitar la complejidad innecesaria. En los próximos temas, exploraremos técnicas avanzadas de manejo del estado y cómo combinar Context API con otras herramientas de React.

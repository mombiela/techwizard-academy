Document (globalcampus.site/namespace.stxt): Operadores y Expresiones
	Navigation:
		Previous: Sintaxis Básica de Java (03-sintaxis-basica)
		Next: Estructuras de Control de Flujo (05-estructuras-control)
	
	Header: Introducción a los Operadores en Java
	Subheader: ¿Qué son los operadores?
	
	Content:
		En Java, los operadores son símbolos que realizan operaciones en uno o más operandos. Los operandos son valores o variables sobre los cuales se aplica el operador, y el resultado es un nuevo valor. Los operadores son fundamentales para construir expresiones que forman la lógica de los programas.
		
	Header: Tipos de Operadores en Java
	Subheader: Operadores Aritméticos
	
	Content:
		Los operadores aritméticos se utilizan para realizar operaciones matemáticas básicas como suma, resta, multiplicación, división y módulo.
		
		* **Suma**: `+`
		* **Resta**: `-`
		* **Multiplicación**: `*`
		* **División**: `/`
		* **Módulo**: `%`
		
	Code:
		int a = 10;
		int b = 3;
		int suma = a + b;        // 13
		int resta = a - b;       // 7
		int multiplicacion = a * b; // 30
		int division = a / b;    // 3
		int modulo = a % b;      // 1

	Subheader: Operadores de Asignación
	
	Content:
		Los operadores de asignación se utilizan para asignar valores a las variables. El más básico es el operador `=`, pero también existen operadores compuestos que combinan asignación con otra operación.
		
		* **Asignación simple**: `=`
		* **Asignación y suma**: `+=`
		* **Asignación y resta**: `-=`
		* **Asignación y multiplicación**: `*=`
		* **Asignación y división**: `/=`
		* **Asignación y módulo**: `%=`
		
	Code:
		int x = 5;
		x += 3;  // x es ahora 8
		x -= 2;  // x es ahora 6
		x *= 4;  // x es ahora 24
		x /= 3;  // x es ahora 8
		x %= 5;  // x es ahora 3

	Subheader: Operadores Relacionales
	
	Content:
		Los operadores relacionales comparan dos valores y devuelven un valor booleano (`true` o `false`). Se utilizan para tomar decisiones dentro del código.
		
		* **Igual a**: `==`
		* **No igual a**: `!=`
		* **Mayor que**: `>`
		* **Menor que**: `<`
		* **Mayor o igual que**: `>=`
		* **Menor o igual que**: `<=`
		
	Code:
		int m = 10;
		int n = 20;
		boolean esIgual = (m == n);     // false
		boolean noEsIgual = (m != n);   // true
		boolean mayorQue = (m > n);     // false
		boolean menorQue = (m < n);     // true
		boolean mayorOIgual = (m >= n); // false
		boolean menorOIgual = (m <= n); // true

	Subheader: Operadores Lógicos
	
	Content:
		Los operadores lógicos se utilizan para combinar expresiones booleanas:
		
		* **Y lógico**: `&&` - Devuelve `true` si ambas expresiones son `true`.
		* **O lógico**: `||` - Devuelve `true` si al menos una expresión es `true`.
		* **No lógico**: `!` - Invierte el valor booleano de la expresión.
		
	Code:
		boolean p = true;
		boolean q = false;
		boolean resultado1 = p && q;  // false
		boolean resultado2 = p || q;  // true
		boolean resultado3 = !p;      // false

	Header: Precedencia de Operadores
	Subheader: Orden de Evaluación
	
	Content:
		La precedencia de operadores determina el orden en que se evalúan los operadores en una expresión compleja. Los operadores con mayor precedencia se evalúan antes que los de menor precedencia.
		
		**Ejemplo:**
		
		Code:
			int resultado = 10 + 2 * 5;  // resultado es 20, no 60
		
		Content:
		En el ejemplo anterior, la multiplicación se realiza antes que la suma debido a la precedencia de operadores. Si deseas cambiar el orden, puedes usar paréntesis:
		
	Code:
		int resultado = (10 + 2) * 5;  // resultado es 60

	Header: Operadores de Incremento y Decremento
	Subheader: Incremento (`++`) y Decremento (`--`)
	
	Content:
		Los operadores de incremento y decremento se utilizan para aumentar o disminuir el valor de una variable en 1. Pueden usarse en forma prefija o posfija:
		
		* **Prefijo**: `++x` o `--x` - Incrementa o decrementa antes de usar el valor en la expresión.
		* **Posfijo**: `x++` o `x--` - Usa el valor en la expresión y luego incrementa o decrementa.
		
	Code:
		int y = 5;
		int z = ++y;  // y es 6, z es 6
		int w = y--;  // y es 5, w es 6

	Content:
		El uso correcto de estos operadores es fundamental para evitar errores lógicos en el código.

	Content:
		Con este conocimiento de operadores y expresiones, estás listo para construir lógica más compleja en tus programas Java. En el siguiente tema, exploraremos las estructuras de control de flujo que te permitirán tomar decisiones y repetir acciones en tu código.

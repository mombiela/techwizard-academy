Document (globalcampus.site/namespace.stxt): Clases y objetos
	
	Content: 
	    Las clases son un concepto fundamental en la programación orientada a objetos (OOP) y permiten agrupar datos y funciones en una única entidad llamada "objeto".
	    
	Header:  Definición de una Clase 
	
	Content:
	    
	    Para definir una clase en Python, utilizamos la palabra clave ```class``` seguida del nombre de la clase. Por convención, el nombre de las clases empieza con mayúscula.
	    
	Code:
	    class ***Persona***:
	    pass
	
	
	Content:
	    
	    En este ejemplo, ```Persona``` es una clase vacía. La palabra clave ```pass``` se usa como un marcador de posición que indica que no hay nada dentro de la clase por el momento.
	    
	Header:  Atributos y Métodos 
	
	Content:
	    
	    Una clase puede tener atributos (variables) y métodos (funciones). Los atributos representan las características de un objeto, mientras que los métodos representan su comportamiento.
	    
	Code:
	    class ***Persona***:
	    def ***__init__***(self, nombre, edad):
	    self.nombre = nombre
	    self.edad = edad
	    
	    def ***saludar***(self):
	    print(f"Hola, me llamo {self.nombre} y tengo {self.edad} años.")
	
	
	Content:
	    
	    * ```__init__```: Este es un método especial llamado constructor. Se llama automáticamente cuando se crea una nueva instancia de la clase. Se utiliza para inicializar los atributos del objeto.
	    * ```self```: Es una referencia al objeto actual. Se usa para acceder a los atributos y métodos de la clase desde dentro de la clase.
	    
	Header:  Crear Instancias de una Clase 
	
	Content:
	    
	    Para crear un objeto (instancia) de una clase, simplemente llamamos a la clase como si fuera una función.
	    
	Code:
	    persona1 = Persona("Ana", 30)
	    persona2 = Persona("Luis", 25)
	
	
	Content:
	    
	    Ahora ```persona1``` y ```persona2``` son dos objetos diferentes de la clase Persona.
	    
	Header:  Acceder a Atributos y Métodos 
	
	Content:
	    
	    Podemos acceder a los atributos y métodos de un objeto usando la sintaxis de punto.
	    
	Code:
	    print(persona1.***nombre***)  # Output: Ana
	    print(persona1.***edad***)    # Output: 30
	    
	    persona1.***saludar()***      # Output: Hola, me llamo Ana y tengo 30 años.
	    persona2.***saludar()***      # Output: Hola, me llamo Luis y tengo 25 años.
	
	
	Content:
	    
	Header:  Herencia 
	
	Content:
	    
	    La herencia permite crear una nueva clase basada en una clase existente. La nueva clase (subclase) hereda los atributos y métodos de la clase original (superclase).
	    
	Code:
	    ***class Empleado(Persona):***
	    def __init__(self, nombre, edad, salario):
	    ***super().__init__(nombre, edad)*** # ***También: Persona.__init__(self, nombre, edad)***
	    self.salario = salario
	    
	    def mostrar_salario(self):
	    print(f"{self.nombre} gana {self.salario} dólares al año.")
	
	
	Content:
	    
	    * ```super()```: Se usa para llamar al constructor de la superclase y asegurarse de que los atributos heredados se inicialicen correctamente.
	    * En vez de ```super().__init__(nombre, edad)``` es equivalente: ```Persona.__init__(self, nombre, edad)```, aunque quizá no sea tan claro.
	    
	Code:
	    empleado1 = Empleado("Carlos", 40, 50000)
	    empleado1.saludar()          # Output: Hola, me llamo Carlos y tengo 40 años.
	    empleado1.mostrar_salario()  # Output: Carlos gana 50000 dólares al año.
	
	
	Content:
	    
	Header:  Resumen 
	
	Content:
	    
	    * **Clase**: Define una nueva estructura de datos con atributos y métodos.
	    * **Objeto**: Una instancia de una clase.
	    * **Atributo**: Una variable que pertenece a una clase.
	    * **Método**: Una función que pertenece a una clase.
	    * ```__init__```: Método constructor, inicializa los atributos de la clase.
	    * **Herencia**: Permite crear una nueva clase basada en una clase existente.

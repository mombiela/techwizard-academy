Unit(globalcampus.site/namespace.stxt): Llamada a procedimientos y manejo de parámetros
	
	Text: 
	    En COBOL, la llamada a procedimientos y el manejo de parámetros son fundamentales para la modularización y reutilización del código. A través de subprogramas, se pueden pasar datos entre el programa principal y los subprogramas utilizando diferentes técnicas de manejo de parámetros.
	    
	H1: Tipos de parámetros
	
	Text:
	    
	    Los parámetros en COBOL se pasan por referencia, lo que significa que cualquier cambio en el parámetro dentro del subprograma se reflejará en el programa llamador. Los parámetros se definen en la ```LINKAGE SECTION``` del subprograma y se pasan usando la cláusula ```USING```.
	    
	H2: Tipos de parámetros comunes
	
	Text:
	    
	    *  **Parámetros de entrada**: Son utilizados solo para pasar datos al subprograma.
	    *  **Parámetros de salida**: Son utilizados para devolver datos al programa llamador.
	    *  **Parámetros de entrada/salida**: Son utilizados tanto para pasar datos al subprograma como para devolver datos al programa llamador.
	    
	H1: Definición y llamada a un subprograma
	
	Text:
	    
	    A continuación, se muestra cómo definir un subprograma que acepta y devuelve parámetros, así como cómo llamarlo desde un programa principal.
	    
	H2: Ejemplo de subprograma
	
	Text:
	    
	Code:
	    IDENTIFICATION DIVISION.
	    PROGRAM-ID. Subprograma-Ejemplo.
	    
	    ENVIRONMENT DIVISION.
	    
	    DATA DIVISION.
	    WORKING-STORAGE SECTION.
	    
	    LINKAGE SECTION.
	    01 LS-Entrada PIC 9(4).
	    01 LS-Salida PIC 9(4).
	    
	    PROCEDURE DIVISION USING LS-Entrada LS-Salida.
	    ADD LS-Entrada TO 10 GIVING LS-Salida.
	    EXIT PROGRAM.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  El subprograma ```Subprograma-Ejemplo``` acepta dos parámetros: ```LS-Entrada``` y ```LS-Salida```.
	    *  La lógica del subprograma suma 10 al valor de ```LS-Entrada``` y almacena el resultado en ```LS-Salida```.
	    
	H2: Ejemplo de llamada a un subprograma desde el programa principal
	
	Text:
	    
	Code:
	    IDENTIFICATION DIVISION.
	    PROGRAM-ID. Programa-Principal.
	    
	    ENVIRONMENT DIVISION.
	    
	    DATA DIVISION.
	    WORKING-STORAGE SECTION.
	    01 WS-Entrada PIC 9(4) VALUE 5.
	    01 WS-Salida PIC 9(4).
	    
	    PROCEDURE DIVISION.
	    CALL 'Subprograma-Ejemplo' USING WS-Entrada WS-Salida.
	    DISPLAY 'Resultado: ' WS-Salida.
	    STOP RUN.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  El programa principal define los parámetros ```WS-Entrada``` y ```WS-Salida``` en la ```WORKING-STORAGE SECTION```.
	    *  Utiliza la sentencia ```CALL 'Subprograma-Ejemplo' USING WS-Entrada WS-Salida``` para llamar al subprograma.
	    *  Después de la llamada, el resultado almacenado en ```WS-Salida``` se muestra utilizando ```DISPLAY```.
	    
	H1: Manejo de múltiples parámetros
	
	Text:
	    
	    COBOL permite pasar múltiples parámetros en una llamada a subprograma. Los parámetros deben ser declarados en el orden correcto tanto en el programa llamador como en el subprograma.
	    
	H2: Ejemplo con múltiples parámetros
	
	Text:
	    
	Code:
	    IDENTIFICATION DIVISION.
	    PROGRAM-ID. Subprograma-Multiples-Parametros.
	    
	    ENVIRONMENT DIVISION.
	    
	    DATA DIVISION.
	    WORKING-STORAGE SECTION.
	    
	    LINKAGE SECTION.
	    01 LS-Param1 PIC 9(4).
	    01 LS-Param2 PIC 9(4).
	    01 LS-Resultado PIC 9(4).
	    
	    PROCEDURE DIVISION USING LS-Param1 LS-Param2 LS-Resultado.
	    ADD LS-Param1 TO LS-Param2 GIVING LS-Resultado.
	    EXIT PROGRAM.
	
	
	Text:
	    
	    Programa principal llamando al subprograma:
	    
	Code:
	    IDENTIFICATION DIVISION.
	    PROGRAM-ID. Programa-Principal.
	    
	    ENVIRONMENT DIVISION.
	    
	    DATA DIVISION.
	    WORKING-STORAGE SECTION.
	    01 WS-Param1 PIC 9(4) VALUE 3.
	    01 WS-Param2 PIC 9(4) VALUE 7.
	    01 WS-Resultado PIC 9(4).
	    
	    PROCEDURE DIVISION.
	    CALL 'Subprograma-Multiples-Parametros' USING WS-Param1 WS-Param2 WS-Resultado.
	    DISPLAY 'Resultado: ' WS-Resultado.
	    STOP RUN.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  El subprograma ```Subprograma-Multiples-Parametros``` acepta tres parámetros: ```LS-Param1```, ```LS-Param2``` y ```LS-Resultado```.
	    *  El programa principal define y pasa los valores ```WS-Param1``` y ```WS-Param2```, y recibe el resultado en ```WS-Resultado```.
	    
	H1: Uso de la sentencia CANCEL
	
	Text:
	    
	    La sentencia ```CANCEL``` se utiliza para liberar la memoria utilizada por un subprograma después de que haya sido llamado, permitiendo que se cargue de nuevo si es necesario.
	    
	Code:
	    CALL 'Subprograma-Ejemplo' USING WS-Entrada WS-Salida.
	    CANCEL Subprograma-Ejemplo.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```CALL 'Subprograma-Ejemplo' USING WS-Entrada WS-Salida``` llama al subprograma.
	    *  ```CANCEL Subprograma-Ejemplo``` libera la memoria utilizada por el subprograma.
	    
	H1: Conclusión
	
	Text:
	    
	    La llamada a procedimientos y el manejo de parámetros en COBOL son esenciales para crear programas modulares y reutilizables. A través de la definición de subprogramas y el uso de técnicas como ```CALL``` y ```CANCEL```, los desarrolladores pueden mejorar la estructura y mantenibilidad de sus aplicaciones COBOL.

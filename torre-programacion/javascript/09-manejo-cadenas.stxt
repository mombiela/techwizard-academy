Document (globalcampus.site/namespace.stxt): Manejo de Cadenas de Texto
	Navigation:
		Previous: Objetos y JSON (08-objetos-json)
		Next: Clases y Prototipos (10-clases-prototipos)
	Header: Manejo de Cadenas de Texto en JavaScript
	Subheader: Introducción a las cadenas de texto
	
	Content:
		Las cadenas de texto (o strings) en JavaScript son una secuencia de caracteres utilizados para representar texto. 
		Pueden ser creadas utilizando comillas simples (`'`), comillas dobles (`"`), o backticks (\`).

		JavaScript proporciona una serie de métodos incorporados para manipular y trabajar con cadenas de texto de manera eficiente.

	Code:
		// Ejemplo básico de una cadena de texto
		let saludo = "Hola, mundo!";
		console.log(saludo); // Output: Hola, mundo!

	Subheader: Concatenación de cadenas
	
	Content:
		La concatenación es el proceso de unir dos o más cadenas de texto. 
		En JavaScript, esto se puede hacer utilizando el operador `+` o mediante las plantillas de cadena (template literals).

	Code:
		// Concatenación usando el operador +
		let nombre = "Juan";
		let mensaje = "Hola, " + nombre + ". ¡Bienvenido!";
		console.log(mensaje); // Output: Hola, Juan. ¡Bienvenido!

		// Concatenación usando template literals
		let edad = 25;
		let mensajeConEdad = `Hola, ${nombre}. Tienes ${edad} años.`;
		console.log(mensajeConEdad); // Output: Hola, Juan. Tienes 25 años.

	Subheader: Métodos comunes para cadenas
	
	Content:
		JavaScript ofrece una amplia variedad de métodos para trabajar con cadenas de texto. Algunos de los métodos más comunes incluyen:

		* `length` - Devuelve la longitud de la cadena.
		* `toUpperCase()` - Convierte todos los caracteres de la cadena a mayúsculas.
		* `toLowerCase()` - Convierte todos los caracteres de la cadena a minúsculas.
		* `indexOf()` - Devuelve el índice de la primera aparición de un valor especificado en la cadena.
		* `slice()` - Extrae una parte de la cadena y devuelve una nueva cadena.
		* `substring()` - Similar a `slice()`, pero no acepta índices negativos.
		* `replace()` - Reemplaza parte de la cadena con otro valor.

	Code:
		// Ejemplos de métodos de cadena
		let texto = "JavaScript es increíble";

		console.log("Longitud:", texto.length); // Output: Longitud: 22
		console.log("En mayúsculas:", texto.toUpperCase()); // Output: En mayúsculas: JAVASCRIPT ES INCREÍBLE
		console.log("Posición de 'es':", texto.indexOf("es")); // Output: Posición de 'es': 11
		console.log("Cortar cadena:", texto.slice(0, 10)); // Output: Cortar cadena: JavaScript
		console.log("Reemplazar 'increíble':", texto.replace("increíble", "fantástico")); // Output: Reemplazar 'increíble': JavaScript es fantástico

	Subheader: Plantillas de cadena (Template Literals)
	
	Content:
		Las plantillas de cadena, introducidas en ES6, son una forma más cómoda de trabajar con cadenas. 
		Permiten la interpolación de variables y expresiones dentro de las cadenas utilizando `${}`.

	Code:
		// Ejemplo de template literal
		let producto = "laptop";
		let precio = 1200;
		let oferta = `El precio de la ${producto} es de $${precio}.`;
		console.log(oferta); // Output: El precio de la laptop es de $1200.

	Subheader: Manejo de cadenas multilínea
	
	Content:
		Con las plantillas de cadena, también es posible crear cadenas de texto multilínea sin necesidad de concatenar o usar caracteres especiales.

	Code:
		// Ejemplo de cadena multilínea
		let mensajeMultilinea = `Esta es una línea.
		Esta es otra línea.
		Y esta es la tercera línea.`;

		console.log(mensajeMultilinea);
		// Output:
		// Esta es una línea.
		// Esta es otra línea.
		// Y esta es la tercera línea.

	Subheader: Métodos avanzados de cadenas
	
	Content:
		Además de los métodos básicos, JavaScript proporciona métodos avanzados para manipular cadenas de texto:

		* `split()` - Divide una cadena en un arreglo de subcadenas, según un separador especificado.
		* `trim()` - Elimina los espacios en blanco de ambos extremos de la cadena.
		* `includes()` - Verifica si una cadena contiene otra cadena dentro de ella.
		* `repeat()` - Repite una cadena un número especificado de veces.

	Code:
		// Ejemplos de métodos avanzados
		let frase = "  Aprender JavaScript es divertido  ";

		// Dividir la cadena en palabras
		let palabras = frase.split(" ");
		console.log("Palabras:", palabras);
		// Output: Palabras: ["", "", "Aprender", "JavaScript", "es", "divertido", "", ""]

		// Eliminar espacios en blanco
		let fraseSinEspacios = frase.trim();
		console.log("Sin espacios:", fraseSinEspacios); // Output: Sin espacios: Aprender JavaScript es divertido

		// Verificar si una palabra está en la cadena
		let incluyeJavaScript = frase.includes("JavaScript");
		console.log("¿Incluye 'JavaScript'?:", incluyeJavaScript); // Output: ¿Incluye 'JavaScript'?: true

		// Repetir la cadena
		let repetirFrase = "¡JavaScript! ".repeat(3);
		console.log(repetirFrase); // Output: ¡JavaScript! ¡JavaScript! ¡JavaScript!

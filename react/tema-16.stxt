Document (globalcampus.site/namespace.stxt): Navegación entre Componentes
	Header: Introducción
	Subheader: Importancia de la Navegación en Aplicaciones React
	Content:
		La navegación entre componentes es un aspecto crucial en aplicaciones React de una sola página (SPA). Permite a los usuarios moverse entre diferentes vistas o secciones de la aplicación sin recargar la página, lo que mejora significativamente la experiencia de usuario. React Router facilita este proceso al proporcionar herramientas y componentes para manejar la navegación de manera eficiente.

	Header: Navegación Básica con el Componente Link
	Subheader: Uso de Link para Navegar
	Content:
		El componente `Link` de React Router es la forma más sencilla y común de manejar la navegación en aplicaciones React. Funciona de manera similar a un enlace HTML, pero sin provocar una recarga completa de la página.
	Code:
		// Ejemplo básico de uso de Link
		import { Link } from 'react-router-dom';

		function Navbar() {
			return (
				<nav>
					<ul>
						<li><Link to="/">Inicio</Link></li>
						<li><Link to="/sobre">Sobre Nosotros</Link></li>
						<li><Link to="/contacto">Contacto</Link></li>
					</ul>
				</nav>
			);
		}

	Content:
		En este ejemplo, la `Navbar` contiene enlaces que permiten al usuario navegar entre las páginas "Inicio", "Sobre Nosotros" y "Contacto" utilizando el componente `Link` de React Router.

	Header: Navegación Programática
	Subheader: Uso del Hook useNavigate
	Content:
		Además de `Link`, React Router ofrece `useNavigate`, un hook que permite realizar la navegación de manera programática, es decir, desde dentro de un componente o en respuesta a eventos.
	Code:
		// Ejemplo de navegación programática con useNavigate
		import { useNavigate } from 'react-router-dom';

		function Formulario() {
			const navigate = useNavigate();

			function manejarEnvio(evento) {
				evento.preventDefault();
				// Después de enviar el formulario, navegar a otra ruta
				navigate('/gracias');
			}

			return (
				<form onSubmit={manejarEnvio}>
					<button type="submit">Enviar</button>
				</form>
			);
		}

	Content:
		En este ejemplo, `useNavigate` se usa para redirigir al usuario a la página "/gracias" después de enviar un formulario, lo que permite manejar la navegación dentro de eventos y otras funciones.

	Header: Navegación Condicional
	Subheader: Uso de la Navegación Condicional
	Content:
		A veces es necesario redirigir al usuario basándose en ciertas condiciones, como si está autenticado o si ha completado una tarea específica. Esto se puede manejar fácilmente usando `useNavigate` dentro de un bloque condicional.
	Code:
		// Ejemplo de navegación condicional
		import { useNavigate } from 'react-router-dom';

		function PanelControl({ isAuthenticated }) {
			const navigate = useNavigate();

			if (!isAuthenticated) {
				navigate('/login');
			}

			return (
				<div>
					<h2>Panel de Control</h2>
				</div>
			);
		}

	Content:
		En este ejemplo, si el usuario no está autenticado (`isAuthenticated` es `false`), se redirige automáticamente a la página de inicio de sesión.

	Header: Navegación Anidada
	Subheader: Creación de Rutas Anidadas
	Content:
		React Router permite la creación de rutas anidadas, lo que facilita la estructuración de aplicaciones más complejas con múltiples niveles de navegación.
	Code:
		// Ejemplo de rutas anidadas
		import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';

		function PanelControl() {
			return (
				<div>
					<h2>Panel de Control</h2>
					<ul>
						<li><Link to="usuarios">Usuarios</Link></li>
						<li><Link to="configuracion">Configuración</Link></li>
					</ul>
					<Routes>
						<Route path="usuarios" element={<Usuarios />} />
						<Route path="configuracion" element={<Configuracion />} />
					</Routes>
				</div>
			);
		}

		function App() {
			return (
				<Router>
					<Routes>
						<Route path="panel" element={<PanelControl />} />
					</Routes>
				</Router>
			);
		}

	Content:
		En este ejemplo, `PanelControl` tiene rutas anidadas para "Usuarios" y "Configuración". La navegación dentro del panel permite cambiar entre estas dos vistas mientras se mantiene la estructura general del panel.

	Header: Manejo de la Navegación con Parámetros
	Subheader: Navegación con Parámetros Dinámicos
	Content:
		En aplicaciones donde se navega a diferentes vistas basadas en datos dinámicos, como perfiles de usuarios o detalles de productos, se pueden utilizar parámetros en las rutas.
	Code:
		// Ejemplo de navegación con parámetros
		function Usuarios() {
			const usuarios = [
				{ id: 1, nombre: 'Juan' },
				{ id: 2, nombre: 'Ana' },
			];

			return (
				<ul>
					{usuarios.map((usuario) => (
						<li key={usuario.id}>
							<Link to={`/usuario/${usuario.id}`}>{usuario.nombre}</Link>
						</li>
					))}
				</ul>
			);
		}

		function PerfilUsuario({ match }) {
			const { id } = match.params;
			return <h2>Perfil del Usuario: {id}</h2>;
		}

		function App() {
			return (
				<Router>
					<Routes>
						<Route path="usuario/:id" element={<PerfilUsuario />} />
					</Routes>
				</Router>
			);
		}

	Content:
		En este ejemplo, cada usuario en la lista tiene un enlace que redirige a una ruta dinámica basada en su ID, mostrando la vista de perfil correspondiente.

	Header: Conclusión
	Subheader: Resumen sobre Navegación en React
	Content:
		La navegación entre componentes es fundamental para crear aplicaciones React dinámicas y usables. Con herramientas como `Link`, `useNavigate`, y las rutas anidadas, React Router ofrece una solución completa para manejar la navegación de manera eficiente. Entender cómo implementar y gestionar la navegación te permitirá desarrollar aplicaciones más intuitivas y fáciles de usar. En los próximos temas, exploraremos aspectos más avanzados de React Router, como la protección de rutas y la implementación de la navegación basada en roles.

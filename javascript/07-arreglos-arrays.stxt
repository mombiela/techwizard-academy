Document (globalcampus.site/namespace.stxt): Arreglos (Arrays)
	Navigation:
		Previous: Funciones (06-funciones)
		Next: Objetos y JSON (08-objetos-json)
	Header: Arreglos (Arrays) en JavaScript
	Subheader: ¿Qué es un arreglo?
	
	Content:
		Un arreglo (o array) es una estructura de datos que permite almacenar múltiples valores en una sola variable. 
		Los arreglos son especialmente útiles cuando se necesita manejar una colección de elementos relacionados.

		En JavaScript, los arreglos son objetos, lo que significa que pueden contener elementos de diferentes tipos de datos, 
		incluso otros arreglos.

	Code:
		// Ejemplo básico de un arreglo
		let frutas = ["manzana", "banana", "naranja"];
		console.log(frutas); // Output: ["manzana", "banana", "naranja"]

	Subheader: Creación y acceso a elementos
	
	Content:
		Los arreglos en JavaScript se crean utilizando corchetes `[]`. Los elementos dentro de un arreglo están indexados 
		empezando desde `0`, lo que significa que el primer elemento está en la posición `0`, el segundo en la posición `1`, y así sucesivamente.

	Code:
		// Creación de un arreglo
		let numeros = [1, 2, 3, 4, 5];

		// Acceso a un elemento del arreglo
		let primero = numeros[0];
		console.log("El primer número es: " + primero); // Output: El primer número es: 1

		// Modificar un elemento del arreglo
		numeros[2] = 10;
		console.log(numeros); // Output: [1, 2, 10, 4, 5]

	Subheader: Métodos comunes de los arreglos
	
	Content:
		JavaScript proporciona una amplia variedad de métodos incorporados para manipular arreglos. 
		Algunos de los más comunes son:

		* `push()` - Añade uno o más elementos al final del arreglo.
		* `pop()` - Elimina el último elemento del arreglo.
		* `shift()` - Elimina el primer elemento del arreglo.
		* `unshift()` - Añade uno o más elementos al inicio del arreglo.
		* `length` - Devuelve el número de elementos en el arreglo.
		* `slice()` - Devuelve una copia superficial de una porción del arreglo.
		* `splice()` - Añade o elimina elementos en un arreglo.

	Code:
		// Uso de métodos de arreglo
		let colores = ["rojo", "verde", "azul"];

		// Añadir un elemento al final
		colores.push("amarillo");
		console.log(colores); // Output: ["rojo", "verde", "azul", "amarillo"]

		// Eliminar el último elemento
		colores.pop();
		console.log(colores); // Output: ["rojo", "verde", "azul"]

		// Añadir un elemento al inicio
		colores.unshift("naranja");
		console.log(colores); // Output: ["naranja", "rojo", "verde", "azul"]

		// Eliminar el primer elemento
		colores.shift();
		console.log(colores); // Output: ["rojo", "verde", "azul"]

		// Obtener la longitud del arreglo
		console.log("El número de colores es: " + colores.length); // Output: El número de colores es: 3

	Subheader: Iteración sobre arreglos
	
	Content:
		Es común querer recorrer todos los elementos de un arreglo para realizar alguna operación en cada uno de ellos.
		JavaScript ofrece varias formas de iterar sobre arreglos, incluyendo bucles `for`, `for...of`, y métodos como `forEach()`.

	Code:
		// Iterar sobre un arreglo usando un bucle for
		let animales = ["perro", "gato", "elefante"];

		for (let i = 0; i < animales.length; i++) {
			console.log("Animal: " + animales[i]);
		}

		// Usar el método forEach para iterar
		animales.forEach(function(animal) {
			console.log("Animal usando forEach: " + animal);
		});

		// Usar un bucle for...of para iterar
		for (let animal of animales) {
			console.log("Animal usando for...of: " + animal);
		}

	Subheader: Arreglos multidimensionales
	
	Content:
		Un arreglo multidimensional es un arreglo que contiene otros arreglos como elementos. 
		Estos son útiles para representar estructuras como matrices.

	Code:
		// Ejemplo de un arreglo bidimensional
		let matriz = [
			[1, 2, 3],
			[4, 5, 6],
			[7, 8, 9]
		];

		// Acceder a un elemento en un arreglo bidimensional
		let valor = matriz[1][2];
		console.log("El valor en la posición [1][2] es: " + valor); // Output: El valor en la posición [1][2] es: 6

	Subheader: Métodos avanzados de arreglos
	
	Content:
		JavaScript también incluye métodos avanzados para trabajar con arreglos, como `map()`, `filter()`, `reduce()`, entre otros.

		* `map()` - Crea un nuevo arreglo con los resultados de aplicar una función a cada elemento del arreglo original.
		* `filter()` - Crea un nuevo arreglo con todos los elementos que pasen una prueba especificada en una función.
		* `reduce()` - Aplica una función a un acumulador y a cada elemento del arreglo (de izquierda a derecha) para reducirlo a un único valor.

	Code:
		// Ejemplo de uso de map
		let numerosOriginales = [1, 2, 3, 4];
		let numerosCuadrados = numerosOriginales.map(function(num) {
			return num * num;
		});
		console.log("Números al cuadrado: " + numerosCuadrados); // Output: Números al cuadrado: [1, 4, 9, 16]

		// Ejemplo de uso de filter
		let numerosMayoresQueDos = numerosOriginales.filter(function(num) {
			return num > 2;
		});
		console.log("Números mayores que 2: " + numerosMayoresQueDos); // Output: Números mayores que 2: [3, 4]

		// Ejemplo de uso de reduce
		let sumaTotal = numerosOriginales.reduce(function(acumulador, num) {
			return acumulador + num;
		}, 0);
		console.log("Suma total: " + sumaTotal); // Output: Suma total: 10

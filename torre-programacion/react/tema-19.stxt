Document (globalcampus.site/namespace.stxt): Render Props
	Navigation:
		Previous: Anterior (tema-18)
		Next: Siguiente (tema-20)
		
	Header: Introducción
	Subheader: ¿Qué son las Render Props?
	Content:
		Las Render Props son un patrón en React para compartir lógica entre componentes mediante el uso de una función que un componente pasa a otro. Esta función, denominada "render prop", es utilizada por el componente receptor para controlar lo que se renderiza. Este patrón es útil para situaciones en las que se necesita reutilizar lógica o comportamiento entre diferentes componentes.

	Header: Creación de Componentes con Render Props
	Subheader: Ejemplo Básico de Render Props
	Content:
		Para implementar Render Props, un componente recibe una función como prop y la ejecuta para determinar qué se debe renderizar. Esta función puede recibir datos o estado del componente que la invoca.
	Code:
		// Ejemplo básico de Render Props
		class MouseTracker extends React.Component {
			constructor(props) {
				super(props);
				this.state = { x: 0, y: 0 };
			}

			handleMouseMove = (event) => {
				this.setState({
					x: event.clientX,
					y: event.clientY,
				});
			};

			render() {
				return (
					<div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>
						{this.props.render(this.state)}
					</div>
				);
			}
		}

		function App() {
			return (
				<MouseTracker render={({ x, y }) => (
					<h1>La posición del ratón es: {x}, {y}</h1>
				)} />
			);
		}

	Content:
		En este ejemplo, `MouseTracker` es un componente que utiliza una render prop llamada `render`. La función que se pasa como prop se usa para renderizar la posición del ratón dentro del componente `App`.

	Header: Uso de Render Props para Compartir Lógica
	Subheader: Reutilización de Lógica con Render Props
	Content:
		Las Render Props son particularmente útiles cuando se necesita compartir lógica entre componentes que pueden renderizarse de manera diferente pero requieren la misma funcionalidad subyacente.
	Code:
		// Ejemplo de reutilización de lógica con Render Props
		class Contador extends React.Component {
			constructor(props) {
				super(props);
				this.state = { contador: 0 };
			}

			incrementar = () => {
				this.setState((prevState) => ({ contador: prevState.contador + 1 }));
			};

			render() {
				return (
					<div>
						<button onClick={this.incrementar}>Incrementar</button>
						{this.props.render(this.state.contador)}
					</div>
				);
			}
		}

		function App() {
			return (
				<div>
					<Contador render={(contador) => <h1>El contador es: {contador}</h1>} />
					<Contador render={(contador) => <p>Contador actual: {contador}</p>} />
				</div>
			);
		}

	Content:
		En este ejemplo, el componente `Contador` maneja la lógica del contador, pero diferentes partes de la aplicación pueden renderizar este valor de distintas maneras utilizando la misma lógica de incremento.

	Header: Composición de Render Props
	Subheader: Uso de Múltiples Render Props
	Content:
		Es posible combinar varias Render Props para manejar múltiples aspectos del estado o comportamiento en un componente, proporcionando una mayor flexibilidad.
	Code:
		// Ejemplo de combinación de múltiples Render Props
		class DataFetcher extends React.Component {
			constructor(props) {
				super(props);
				this.state = { data: null, loading: true };
			}

			componentDidMount() {
				fetch(this.props.url)
					.then((response) => response.json())
					.then((data) => this.setState({ data, loading: false }));
			}

			render() {
				return this.props.render(this.state);
			}
		}

		function App() {
			return (
				<DataFetcher url="https://jsonplaceholder.typicode.com/todos/1" render={({ data, loading }) => (
					<div>
						{loading ? <p>Cargando...</p> : <pre>{JSON.stringify(data, null, 2)}</pre>}
					</div>
				)} />
			);
		}

	Content:
		En este ejemplo, el componente `DataFetcher` maneja la lógica de obtención de datos y permite a otros componentes determinar cómo deben renderizarse los datos o el estado de carga.

	Header: Limitaciones y Alternativas a Render Props
	Subheader: Complejidad de las Render Props
	Content:
		Las Render Props pueden aumentar la complejidad del código, especialmente cuando se anidan múltiples Render Props. Esto puede llevar a dificultades en la lectura y mantenimiento del código.
	Subheader: Hooks como Alternativa a Render Props
	Content:
		Con la introducción de los hooks en React, muchas de las necesidades resueltas por Render Props ahora se pueden manejar mediante hooks personalizados, que proporcionan una sintaxis más limpia y directa para compartir lógica.
	Code:
		// Ejemplo de hook personalizado como alternativa a Render Props
		function useContador() {
			const [contador, setContador] = useState(0);
			const incrementar = () => setContador(contador + 1);
			return { contador, incrementar };
		}

		function App() {
			const { contador, incrementar } = useContador();

			return (
				<div>
					<button onClick={incrementar}>Incrementar</button>
					<h1>El contador es: {contador}</h1>
				</div>
			);
		}

	Content:
		En este ejemplo, el hook `useContador` encapsula la lógica del contador, y el componente `App` lo utiliza directamente, simplificando la estructura del código en comparación con el uso de Render Props.

	Header: Conclusión
	Subheader: Resumen sobre Render Props
	Content:
		Las Render Props son una técnica poderosa para compartir lógica entre componentes en React, ofreciendo flexibilidad para manejar diferentes casos de uso en una aplicación. Sin embargo, con la introducción de hooks, muchas de las funcionalidades que anteriormente se manejaban con Render Props ahora se pueden implementar de manera más simple y directa. Comprender ambos patrones y cuándo utilizarlos es esencial para desarrollar aplicaciones React limpias y mantenibles. En los próximos temas, exploraremos más patrones y técnicas avanzadas en React.

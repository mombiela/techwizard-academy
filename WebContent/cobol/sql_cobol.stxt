Unit(globalcampus.site/namespace.stxt): Uso de SQL en programas COBOL
	
	Text: 
	    El uso de SQL en programas COBOL permite integrar sentencias SQL directamente dentro del código COBOL, facilitando la interacción con bases de datos relacionales. Este enfoque, conocido como Embedded SQL (SQL embebido), es esencial para realizar operaciones como consultas, inserciones, actualizaciones y eliminaciones de datos en bases de datos. A continuación, se describen las técnicas y ejemplos para el uso de SQL en programas COBOL.
	    
	H1: Configuración inicial
	
	Text:
	    
	    Para utilizar SQL embebido en COBOL, es necesario incluir la estructura SQL Communication Area (SQLCA) que maneja el estado y los errores de SQL.
	    
	H2: Incluir SQLCA
	
	Text:
	    
	Code:
	    EXEC SQL INCLUDE SQLCA END-EXEC.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```EXEC SQL INCLUDE SQLCA END-EXEC``` incluye la estructura SQLCA, que es utilizada para manejar errores y condiciones SQL.
	    
	H1: Conexión a la base de datos
	
	Text:
	    
	    Para conectarse a una base de datos, se utiliza la sentencia ```CONNECT```.
	    
	H2: Ejemplo de conexión a la base de datos
	
	Text:
	    
	Code:
	    WORKING-STORAGE SECTION.
	    01 DB-CONNECTION-INFO.
	    05 DB-USER PIC X(20) VALUE 'usuario'.
	    05 DB-PASSWORD PIC X(20) VALUE 'contraseña'.
	    05 DB-NAME PIC X(20) VALUE 'nombre_db'.
	    
	    PROCEDURE DIVISION.
	    Conectar-Base-De-Datos.
	    EXEC SQL
	    CONNECT :DB-USER IDENTIFIED BY :DB-PASSWORD
	    USING :DB-NAME
	    END-EXEC.
	    
	    IF SQLCODE <> 0
	    DISPLAY 'Error conectando a la base de datos: ' SQLCODE.
	    END-IF.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```EXEC SQL CONNECT :DB-USER IDENTIFIED BY :DB-PASSWORD USING :DB-NAME END-EXEC``` establece la conexión a la base de datos utilizando las credenciales proporcionadas.
	    *  ```SQLCODE``` se verifica para asegurar que la conexión fue exitosa.
	    
	H1: Consultas a la base de datos
	
	Text:
	    
	    Para realizar consultas en la base de datos, se utiliza la sentencia ```SELECT``` embebida.
	    
	H2: Ejemplo de consulta a la base de datos
	
	Text:
	    
	Code:
	    WORKING-STORAGE SECTION.
	    01 CLIENTE-ID PIC 9(5).
	    01 CLIENTE-NOMBRE PIC X(30).
	    01 CLIENTE-DIRECCION PIC X(50).
	    
	    PROCEDURE DIVISION.
	    Consultar-Base-De-Datos.
	    EXEC SQL
	    SELECT CLIENTE_ID, CLIENTE_NOMBRE, CLIENTE_DIRECCION
	    INTO :CLIENTE-ID, :CLIENTE-NOMBRE, :CLIENTE-DIRECCION
	    FROM CLIENTES
	    WHERE CLIENTE_ID = 12345
	    END-EXEC.
	    
	    IF SQLCODE = 0
	    DISPLAY 'Cliente ID: ' CLIENTE-ID.
	    DISPLAY 'Cliente Nombre: ' CLIENTE-NOMBRE.
	    DISPLAY 'Cliente Dirección: ' CLIENTE-DIRECCION.
	    ELSE
	    DISPLAY 'Error en consulta: ' SQLCODE.
	    END-IF.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```EXEC SQL SELECT CLIENTE_ID, CLIENTE_NOMBRE, CLIENTE_DIRECCION INTO :CLIENTE-ID, :CLIENTE-NOMBRE, :CLIENTE-DIRECCION FROM CLIENTES WHERE CLIENTE_ID = 12345 END-EXEC``` ejecuta una consulta SQL que selecciona los datos del cliente con ```CLIENTE_ID``` igual a 12345.
	    *  Los resultados se almacenan en las variables definidas en la sección ```WORKING-STORAGE```.
	    
	H1: Inserción de datos en la base de datos
	
	Text:
	    
	    Para insertar nuevos registros en la base de datos, se utiliza la sentencia ```INSERT```.
	    
	H2: Ejemplo de inserción de datos
	
	Text:
	    
	Code:
	    PROCEDURE DIVISION.
	    Insertar-En-Base-De-Datos.
	    EXEC SQL
	    INSERT INTO CLIENTES (CLIENTE_ID, CLIENTE_NOMBRE, CLIENTE_DIRECCION)
	    VALUES (:CLIENTE-ID, :CLIENTE-NOMBRE, :CLIENTE-DIRECCION)
	    END-EXEC.
	    
	    IF SQLCODE <> 0
	    DISPLAY 'Error insertando datos: ' SQLCODE.
	    ELSE
	    DISPLAY 'Datos insertados correctamente'.
	    END-IF.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```EXEC SQL INSERT INTO CLIENTES (CLIENTE_ID, CLIENTE_NOMBRE, CLIENTE_DIRECCION) VALUES (:CLIENTE-ID, :CLIENTE-NOMBRE, :CLIENTE-DIRECCION) END-EXEC``` inserta un nuevo registro en la tabla CLIENTES.
	    *  ```SQLCODE``` se verifica para asegurar que la inserción fue exitosa.
	    
	H1: Actualización de datos en la base de datos
	
	Text:
	    
	    Para actualizar registros existentes, se utiliza la sentencia ```UPDATE```.
	    
	H2: Ejemplo de actualización de datos
	
	Text:
	    
	Code:
	    PROCEDURE DIVISION.
	    Actualizar-En-Base-De-Datos.
	    EXEC SQL
	    UPDATE CLIENTES
	    SET CLIENTE_DIRECCION = :CLIENTE-DIRECCION
	    WHERE CLIENTE_ID = :CLIENTE-ID
	    END-EXEC.
	    
	    IF SQLCODE <> 0
	    DISPLAY 'Error actualizando datos: ' SQLCODE.
	    ELSE
	    DISPLAY 'Datos actualizados correctamente'.
	    END-IF.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```EXEC SQL UPDATE CLIENTES SET CLIENTE_DIRECCION = :CLIENTE-DIRECCION WHERE CLIENTE_ID = :CLIENTE-ID END-EXEC``` actualiza la dirección del cliente con el ID especificado.
	    *  ```SQLCODE``` se verifica para asegurar que la actualización fue exitosa.
	    
	H1: Eliminación de datos en la base de datos
	
	Text:
	    
	    Para eliminar registros, se utiliza la sentencia ```DELETE```.
	    
	H2: Ejemplo de eliminación de datos
	
	Text:
	    
	Code:
	    PROCEDURE DIVISION.
	    Eliminar-En-Base-De-Datos.
	    EXEC SQL
	    DELETE FROM CLIENTES
	    WHERE CLIENTE_ID = :CLIENTE-ID
	    END-EXEC.
	    
	    IF SQLCODE <> 0
	    DISPLAY 'Error eliminando datos: ' SQLCODE.
	    ELSE
	    DISPLAY 'Datos eliminados correctamente'.
	    END-IF.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```EXEC SQL DELETE FROM CLIENTES WHERE CLIENTE_ID = :CLIENTE-ID END-EXEC``` elimina el registro del cliente con el ID especificado.
	    *  ```SQLCODE``` se verifica para asegurar que la eliminación fue exitosa.
	    
	H1: Manejo de errores y excepciones
	
	Text:
	    
	    El manejo de errores en operaciones con bases de datos se realiza mediante la verificación del ```SQLCODE``` y el uso de la estructura ```SQLCA```.
	    
	H2: Ejemplo de manejo de errores
	
	Text:
	    
	Code:
	    WORKING-STORAGE SECTION.
	    EXEC SQL INCLUDE SQLCA END-EXEC.
	    
	    PROCEDURE DIVISION.
	    Conectar-Base-De-Datos.
	    EXEC SQL
	    CONNECT :DB-USER IDENTIFIED BY :DB-PASSWORD
	    USING :DB-NAME
	    END-EXEC.
	    
	    IF SQLCODE <> 0
	    DISPLAY 'Error conectando a la base de datos: ' SQLCODE.
	    DISPLAY SQLERRMC.
	    END-IF.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```SQLCODE``` y ```SQLERRMC``` se utilizan para verificar y mostrar mensajes de error en operaciones de base de datos.
	    
	H1: Desconexión de la base de datos
	
	Text:
	    
	    Para desconectar de la base de datos, se utiliza la sentencia ```DISCONNECT```.
	    
	H2: Ejemplo de desconexión de la base de datos
	
	Text:
	    
	Code:
	    PROCEDURE DIVISION.
	    Desconectar-Base-De-Datos.
	    EXEC SQL
	    DISCONNECT
	    END-EXEC.
	    
	    IF SQLCODE <> 0
	    DISPLAY 'Error desconectando de la base de datos: ' SQLCODE.
	    ELSE
	    DISPLAY 'Desconectado correctamente de la base de datos'.
	    END-IF.
	
	
	Text:
	    
	    En este ejemplo:
	    
	    *  ```EXEC SQL DISCONNECT END-EXEC``` desconecta la
	    
	    sesión de la base de datos.
	    *  ```SQLCODE``` se verifica para asegurar que la desconexión fue exitosa.
	    
	H1: Conclusión
	
	Text:
	    
	    El uso de SQL en programas COBOL mediante Embedded SQL permite la integración eficiente con bases de datos relacionales. Comprender cómo realizar conexiones, consultas, inserciones, actualizaciones, eliminaciones y manejar errores es esencial para desarrollar aplicaciones COBOL robustas y eficientes que interactúen con bases de datos modernas.

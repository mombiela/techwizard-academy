Document (globalcampus.site/namespace.stxt): Tuplas
	
	Text: 
	Header: Tuplas en Python
	
	Text:
	    
	    Las tuplas en Python son un tipo de dato contenedor ordenado e inmutable. Esto significa que una vez que se crea una tupla, sus elementos no pueden cambiar. Las tuplas son útiles para almacenar colecciones de elementos heterogéneos y para proteger los datos de modificaciones accidentales.
	    
	Header: Creación de Tuplas
	
	Text:
	    
	    Las tuplas se crean usando paréntesis ```()```, separando los elementos con comas.
	    
	    Ejemplo:
	Code:
	    mi_tupla = (1, 2, 3, 4)
	
	
	Text:
	    
	    También se pueden crear tuplas sin paréntesis, solo usando comas:
	Code:
	    mi_tupla = 1, 2, 3, 4
	
	
	Text:
	    
	    Para crear una tupla con un solo elemento, se debe incluir una coma al final:
	Code:
	    tupla_un_elemento = (1,)
	
	
	Text:
	    
	Header: Acceso a Elementos
	
	Text:
	    
	    Los elementos de una tupla se acceden mediante índices, comenzando desde 0.
	    
	    Ejemplo:
	Code:
	    primer_elemento = mi_tupla[0]
	    segundo_elemento = mi_tupla[1]
	
	
	Text:
	    
	    Para acceder a los elementos desde el final, se pueden usar índices negativos.
	    
	    Ejemplo:
	Code:
	    ultimo_elemento = mi_tupla[-1]
	    penultimo_elemento = mi_tupla[-2]
	
	
	Text:
	    
	Header: Modificación de Elementos
	
	Text:
	    
	    Las tuplas son inmutables, por lo que no se pueden modificar directamente después de su creación. Sin embargo, se pueden concatenar y repetir para crear nuevas tuplas.
	    
	    *  **Concatenación**: Se pueden concatenar tuplas usando el operador ```+```.
	Code:
	    tupla1 = (1, 2)
	    tupla2 = (3, 4)
	    tupla_concatenada = tupla1 + tupla2 # (1, 2, 3, 4)
	
	
	Text:
	    
	    *  **Repetición**: Se pueden repetir los elementos de una tupla usando el operador ``````.
	Code:
	    tupla_repetida = tupla1  3 # (1, 2, 1, 2, 1, 2)
	
	
	Text:
	    
	Header: Operaciones con Tuplas
	
	Text:
	    
	    *  **Comprobación de Membresía**: Se puede verificar si un elemento está en una tupla usando ```in```.
	Code:
	    existe = 2 in mi_tupla
	
	
	Text:
	    
	    *  **Desempaquetado de Tuplas**: Los elementos de una tupla se pueden desempaquetar en variables individuales.
	Code:
	    a, b, c, d = mi_tupla
	
	
	Text:
	    
	    *  **Iteración**: Se puede iterar sobre los elementos de una tupla usando un bucle ```for```.
	Code:
	    for elemento in mi_tupla:
	    print(elemento)
	
	
	Text:
	    
	Header: Métodos de Tuplas
	
	Text:
	    
	    Las tuplas tienen dos métodos integrados:
	    
	    *  **```count```**: Devuelve el número de veces que un valor aparece en la tupla.
	Code:
	    mi_tupla = (1, 2, 3, 1, 2, 1)
	    contador = mi_tupla.count(1) # 3
	
	
	Text:
	    
	    *  **```index```**: Devuelve el índice de la primera ocurrencia de un valor.
	Code:
	    indice = mi_tupla.index(3) # 2
	
	
	Text:
	    
	Header: Usos Comunes de las Tuplas
	
	Text:
	    
	    *  **Regresar Múltiples Valores de una Función**: Las funciones pueden regresar múltiples valores usando una tupla.
	Code:
	    def dividir(a, b):
	    cociente = a // b
	    residuo = a % b
	    return cociente, residuo
	    
	    resultado = dividir(10, 3)
	    print(resultado) # (3, 1)
	
	
	Text:
	    
	    *  **Usar tuplas como claves en diccionarios**: Las tuplas pueden ser usadas como claves en diccionarios porque son inmutables.
	Code:
	    diccionario = {(1, 2): "valor1", (3, 4): "valor2"}
	    valor = diccionario[(1, 2)]
	
	
	Text:
	    
	Header: Ventajas de las Tuplas
	
	Text:
	    
	    *  **Inmutabilidad**: Proporcionan protección contra modificaciones accidentales.
	    *  **Desempeño**: Son generalmente más rápidas que las listas para ciertas operaciones.
	    *  **Usabilidad como Claves de Diccionario**: Pueden ser usadas como claves en diccionarios debido a su inmutabilidad.

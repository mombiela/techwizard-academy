Document (globalcampus.site/namespace.stxt): Objetos y JSON
	Navigation:
		Previous: Arreglos (Arrays) (07-arreglos-arrays)
		Next: Manejo de Cadenas de Texto (09-manejo-cadenas)
	Header: Objetos y JSON en JavaScript
	Subheader: ¿Qué es un objeto?
	
	Content:
		En JavaScript, un objeto es una colección de propiedades, donde cada propiedad es una asociación entre un nombre (clave) y un valor.
		Los objetos permiten agrupar datos y comportamientos relacionados en una sola estructura, lo que facilita la organización y el manejo de la información.

		Un objeto puede contener múltiples tipos de valores, como números, cadenas, funciones, o incluso otros objetos.

	Code:
		// Ejemplo básico de un objeto
		let persona = {
			nombre: "Juan",
			edad: 30,
			ciudad: "Madrid"
		};

		console.log(persona.nombre); // Output: Juan

	Subheader: Creación y acceso a objetos
	
	Content:
		Los objetos en JavaScript se crean usando llaves `{}` y pueden ser accedidos utilizando la notación de punto o la notación de corchetes.

	Code:
		// Creación de un objeto
		let coche = {
			marca: "Toyota",
			modelo: "Corolla",
			año: 2020
		};

		// Acceso a propiedades usando la notación de punto
		console.log(coche.marca); // Output: Toyota

		// Acceso a propiedades usando la notación de corchetes
		console.log(coche["modelo"]); // Output: Corolla

	Subheader: Métodos en objetos
	
	Content:
		Además de propiedades, los objetos pueden tener métodos, que son funciones asociadas a ese objeto. 
		Los métodos permiten que un objeto realice acciones utilizando sus propios datos.

	Code:
		// Ejemplo de objeto con un método
		let perro = {
			nombre: "Rex",
			edad: 5,
			ladrar: function() {
				console.log("¡Guau guau!");
			}
		};

		// Llamada a un método del objeto
		perro.ladrar(); // Output: ¡Guau guau!

	Subheader: Actualización y eliminación de propiedades
	
	Content:
		Las propiedades de un objeto pueden ser actualizadas o eliminadas en cualquier momento después de que el objeto ha sido creado.

	Code:
		// Actualización de una propiedad
		coche.año = 2022;
		console.log(coche.año); // Output: 2022

		// Adición de una nueva propiedad
		coche.color = "Rojo";
		console.log(coche.color); // Output: Rojo

		// Eliminación de una propiedad
		delete coche.modelo;
		console.log(coche.modelo); // Output: undefined

	Subheader: Iteración sobre las propiedades de un objeto
	
	Content:
		Para iterar sobre las propiedades de un objeto, puedes usar el bucle `for...in`, que recorrerá todas las propiedades enumerables del objeto.

	Code:
		// Ejemplo de iteración sobre un objeto usando for...in
		let libro = {
			titulo: "Cien Años de Soledad",
			autor: "Gabriel García Márquez",
			añoPublicacion: 1967
		};

		for (let propiedad in libro) {
			console.log(propiedad + ": " + libro[propiedad]);
		}
		// Output:
		// titulo: Cien Años de Soledad
		// autor: Gabriel García Márquez
		// añoPublicacion: 1967

	Subheader: JSON: JavaScript Object Notation
	
	Content:
		JSON (JavaScript Object Notation) es un formato de texto ligero y fácil de leer para intercambiar datos. 
		En JavaScript, los objetos JSON son simplemente objetos con una sintaxis específica.

		JSON es ampliamente utilizado en aplicaciones web para enviar y recibir datos de forma estructurada.

	Code:
		// Ejemplo de un objeto JSON
		let usuarioJSON = {
			"nombre": "Carlos",
			"edad": 28,
			"correo": "carlos@example.com"
		};

		// Convertir un objeto JSON a una cadena de texto
		let usuarioTexto = JSON.stringify(usuarioJSON);
		console.log(usuarioTexto); // Output: {"nombre":"Carlos","edad":28,"correo":"carlos@example.com"}

		// Convertir una cadena de texto a un objeto JSON
		let nuevoUsuario = JSON.parse(usuarioTexto);
		console.log(nuevoUsuario.nombre); // Output: Carlos

	Subheader: Trabajando con JSON en aplicaciones web
	
	Content:
		JSON es el formato de datos más común en las aplicaciones web modernas, especialmente para la comunicación entre el cliente (navegador) y el servidor. 
		Las APIs a menudo envían datos en formato JSON, que luego se parsean en JavaScript para ser utilizados en la aplicación.

	Code:
		// Ejemplo de solicitud HTTP que recibe JSON
		fetch("https://api.example.com/usuarios")
			.then(response => response.json())
			.then(data => {
				console.log("Nombre del usuario:", data.nombre);
			})
			.catch(error => console.error("Error:", error));

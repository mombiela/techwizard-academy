Document (globalcampus.site/namespace.stxt): Herencia y Polimorfismo
	Navigation:
		Previous: Clases y Objetos (07-clases-objetos)
		Next: Interfaces y Clases Abstractas (09-interfaces-clases-abstractas)
	
	Header: Introducción a la Herencia
	Subheader: ¿Qué es la herencia en Java?
	
	Content:
		La herencia es uno de los pilares fundamentales de la Programación Orientada a Objetos (POO). Permite crear una nueva clase (subclase) basada en una clase existente (superclase). La subclase hereda los atributos y métodos de la superclase, lo que facilita la reutilización del código y la creación de jerarquías de clases.
		
	Header: Definición de Herencia en Java
	Subheader: Creación de una Subclase
	
	Content:
		Para definir una subclase en Java, se utiliza la palabra clave `extends`. Esto indica que la nueva clase hereda de otra clase existente.
		
	Code:
		public class Animal {
		    String nombre;
		    int edad;

		    void hacerSonido() {
		        System.out.println("El animal hace un sonido");
		    }
		}

		public class Perro extends Animal {
		    void hacerSonido() {
		        System.out.println("El perro ladra");
		    }
		}

	Content:
		En este ejemplo, `Perro` es una subclase de `Animal`. La clase `Perro` hereda los atributos `nombre` y `edad`, y puede sobrescribir el método `hacerSonido` para proporcionar un comportamiento específico.

	Subheader: Uso de `super` para Acceder a la Superclase
	
	Content:
		La palabra clave `super` se utiliza dentro de una subclase para acceder a los métodos y constructores de la superclase. Esto es útil cuando se desea extender o modificar la funcionalidad heredada.
		
	Code:
		public class Animal {
		    String nombre;

		    Animal(String nombre) {
		        this.nombre = nombre;
		    }

		    void hacerSonido() {
		        System.out.println("El animal hace un sonido");
		    }
		}

		public class Perro extends Animal {

		    Perro(String nombre) {
		        super(nombre);
		    }

		    void hacerSonido() {
		        super.hacerSonido();
		        System.out.println("El perro ladra");
		    }
		}

	Content:
		En este ejemplo, el constructor de `Perro` utiliza `super(nombre)` para llamar al constructor de `Animal`, asegurando que el nombre se asigne correctamente. Además, el método `hacerSonido` de `Perro` llama primero al método de la superclase antes de agregar su propio comportamiento.

	Header: Introducción al Polimorfismo
	Subheader: ¿Qué es el Polimorfismo?
	
	Content:
		El polimorfismo permite que un objeto de una subclase se trate como si fuera de la superclase. Esto es útil cuando se desea escribir código que pueda manejar múltiples tipos de objetos de manera uniforme.
		
	Code:
		public class Animal {
		    void hacerSonido() {
		        System.out.println("El animal hace un sonido");
		    }
		}

		public class Perro extends Animal {
		    void hacerSonido() {
		        System.out.println("El perro ladra");
		    }
		}

		public class Gato extends Animal {
		    void hacerSonido() {
		        System.out.println("El gato maúlla");
		    }
		}

		public class Principal {
		    public static void main(String[] args) {
		        Animal miAnimal = new Perro();
		        miAnimal.hacerSonido();  // Llamará al método hacerSonido() de Perro

		        miAnimal = new Gato();
		        miAnimal.hacerSonido();  // Llamará al método hacerSonido() de Gato
		    }
		}

	Content:
		En este ejemplo, la variable `miAnimal` se utiliza para referirse tanto a un `Perro` como a un `Gato`. El método `hacerSonido` que se ejecuta depende del tipo real del objeto al que se refiere `miAnimal` en tiempo de ejecución, lo que demuestra el polimorfismo.

	Subheader: Polimorfismo en Métodos
	
	Content:
		El polimorfismo no solo se aplica a los objetos, sino también a los métodos. Las subclases pueden sobrescribir los métodos de la superclase para proporcionar implementaciones específicas mientras mantienen el mismo nombre de método.
		
	Code:
		public class Ave {
		    void volar() {
		        System.out.println("El ave vuela");
		    }
		}

		public class Aguila extends Ave {
		    void volar() {
		        System.out.println("El águila vuela alto");
		    }
		}

		public class Pinguino extends Ave {
		    void volar() {
		        System.out.println("El pingüino no puede volar");
		    }
		}

		public class Principal {
		    public static void main(String[] args) {
		        Ave miAve = new Aguila();
		        miAve.volar();  // Salida: El águila vuela alto

		        miAve = new Pinguino();
		        miAve.volar();  // Salida: El pingüino no puede volar
		    }
		}

	Content:
		En este ejemplo, el método `volar` se comporta de manera diferente dependiendo de si `miAve` es un `Aguila` o un `Pinguino`. Esto demuestra cómo el polimorfismo permite que un mismo método tenga diferentes comportamientos según el contexto.

	Header: Beneficios de la Herencia y el Polimorfismo
	Subheader: Reutilización de Código y Mantenimiento
	
	Content:
		La herencia y el polimorfismo facilitan la reutilización de código y el mantenimiento del software. Al heredar y sobrescribir métodos, se puede evitar la duplicación de código y se puede extender la funcionalidad sin modificar las clases existentes.

	Subheader: Flexibilidad y Extensibilidad
	
	Content:
		El polimorfismo permite escribir código más flexible y extensible. Se pueden agregar nuevas clases y métodos sin cambiar el código existente que depende de las interfaces o superclases, lo que hace que el software sea más adaptable a cambios futuros.

	Content:
		Con el conocimiento de herencia y polimorfismo, has aprendido a aprovechar la potencia de la Programación Orientada a Objetos en Java. En el siguiente tema, exploraremos las interfaces y las clases abstractas, que son herramientas avanzadas para definir contratos y comportamientos en tus clases.

	**Recursos adicionales:**
	* [Documentación oficial de Java sobre herencia y polimorfismo](https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html)

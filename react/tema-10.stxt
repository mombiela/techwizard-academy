Document (globalcampus.site/namespace.stxt): Refs y el DOM
	Header: Introducción
	Subheader: ¿Qué son las Refs en React?
	Content:
		Las refs en React son una forma de acceder directamente a elementos del DOM o a componentes React creados en el método `render`. Permiten interactuar con el DOM de una manera que no es posible a través del flujo de datos normal de React, lo que puede ser útil en ciertas situaciones donde necesitas manipular elementos de manera directa.

	Header: Creación y Uso de Refs
	Subheader: Creación de Refs usando useRef
	Content:
		En componentes funcionales, la creación de refs se realiza utilizando el hook `useRef`. Este hook retorna un objeto mutable cuyo `.current` se puede utilizar para almacenar una referencia a un elemento del DOM.
	Code:
		// Ejemplo de uso de useRef para crear una referencia
		function MiComponente() {
			const inputRef = useRef(null);

			function enfocarInput() {
				inputRef.current.focus();
			}

			return (
				<div>
					<input ref={inputRef} type="text" />
					<button onClick={enfocarInput}>Enfocar Input</button>
				</div>
			);
		}

	Content:
		En este ejemplo, `inputRef` se utiliza para almacenar una referencia al elemento `<input>`. La función `enfocarInput` usa esta referencia para enfocar el campo de texto cuando se hace clic en el botón.

	Subheader: Creación de Refs en Componentes de Clase
	Content:
		En componentes de clase, las refs se crean usando `React.createRef()` dentro del constructor del componente. Este método retorna un objeto ref que luego puede ser asignado a elementos del DOM a través del atributo `ref`.
	Code:
		// Ejemplo de creación de refs en un componente de clase
		class MiComponente extends React.Component {
			constructor(props) {
				super(props);
				this.inputRef = React.createRef();
			}

			enfocarInput = () => {
				this.inputRef.current.focus();
			};

			render() {
				return (
					<div>
						<input ref={this.inputRef} type="text" />
						<button onClick={this.enfocarInput}>Enfocar Input</button>
					</div>
				);
			}
		}

	Content:
		En este ejemplo, `this.inputRef` se crea en el constructor y se utiliza para referenciar el elemento `<input>`, permitiendo que el método `enfocarInput` enfoque el campo de texto.

	Header: Uso Avanzado de Refs
	Subheader: Refs para Acceder a Componentes
	Content:
		Además de referenciar elementos del DOM, las refs también pueden ser utilizadas para acceder a métodos y propiedades de componentes React, lo que puede ser útil para manejar comportamientos más complejos o interacciones entre componentes.
	Code:
		// Ejemplo de uso de refs para acceder a un componente hijo
		function Hijo() {
			const decirHola = () => {
				alert('¡Hola desde el componente Hijo!');
			};

			return <button onClick={decirHola}>Decir Hola</button>;
		}

		class Padre extends React.Component {
			constructor(props) {
				super(props);
				this.hijoRef = React.createRef();
			}

			decirHolaDesdeHijo = () => {
				this.hijoRef.current.decirHola();
			};

			render() {
				return (
					<div>
						<Hijo ref={this.hijoRef} />
						<button onClick={this.decirHolaDesdeHijo}>Hola desde el Padre</button>
					</div>
				);
			}
		}

	Content:
		En este ejemplo, el componente padre usa una ref para llamar al método `decirHola` del componente hijo directamente desde el componente padre.

	Subheader: Manipulación Directa del DOM
	Content:
		Aunque el enfoque de React es evitar la manipulación directa del DOM, en algunas situaciones puede ser necesario, como en la integración con bibliotecas de terceros o para manejar animaciones manualmente.
	Code:
		// Ejemplo de manipulación directa del DOM con refs
		function MiComponente() {
			const divRef = useRef(null);

			function cambiarColor() {
				divRef.current.style.backgroundColor = 'lightblue';
			}

			return (
				<div>
					<div ref={divRef} style={{ width: '100px', height: '100px', backgroundColor: 'lightgray' }} />
					<button onClick={cambiarColor}>Cambiar Color</button>
				</div>
			);
		}

	Content:
		En este ejemplo, la referencia `divRef` se utiliza para cambiar directamente el estilo del div, cambiando su color de fondo cuando se hace clic en el botón.

	Header: Reglas y Buenas Prácticas con Refs
	Subheader: Cuándo Usar Refs
	Content:
		* **Acceder a elementos del DOM:** Cuando necesitas acceder directamente a un elemento del DOM para manipularlo.
		* **Manejar componentes de terceros:** Para interactuar con componentes de bibliotecas que no están bajo tu control.
		* **Controlar la reproducción de vídeos o medios:** Para iniciar, pausar o manejar el control de medios mediante la manipulación directa de elementos `<video>` o `<audio>`.

	Subheader: Buenas Prácticas
	Content:
		* **Minimiza el uso de refs:** Usa refs solo cuando sea absolutamente necesario. En la mayoría de los casos, React proporciona otras formas de lograr lo que necesitas sin manipular el DOM directamente.
		* **Evita la manipulación directa del DOM:** A menos que sea necesario, evita manipular el DOM directamente, ya que esto puede llevar a inconsistencias entre el estado de la UI y el estado de la aplicación en React.
		* **Manten las refs simples:** Utiliza refs para tareas simples y específicas. Si un componente necesita demasiadas refs o manipulación compleja del DOM, considera reestructurar tu componente o enfoque.

	Header: Conclusión
	Subheader: Resumen sobre Refs y el DOM en React
	Content:
		Las refs en React proporcionan una herramienta poderosa para manejar interacciones directas con el DOM y componentes React, aunque deben usarse con cuidado para evitar comprometer la integridad del flujo de datos de React. Entender cuándo y cómo utilizar refs correctamente te permitirá resolver ciertos problemas de manera efectiva sin comprometer el diseño declarativo que hace a React tan poderoso. En los próximos temas, exploraremos más sobre la administración del estado y el uso de Context API en React.

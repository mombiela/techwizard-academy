Document (globalcampus.site/namespace.stxt): Ciclos en Java: for, while, do-while
	Navigation:
		Previous: Estructuras de Control de Flujo (05-estructuras-control)
		Next: Clases y Objetos (07-clases-objetos)
	
	Header: Introducción a los Ciclos
	Subheader: ¿Qué son los ciclos en programación?
	
	Content:
		Los ciclos, o bucles, son estructuras que permiten repetir un bloque de código múltiples veces. En Java, existen tres tipos principales de bucles: `for`, `while`, y `do-while`. Cada uno tiene su propio uso y características, lo que permite a los programadores seleccionar el ciclo más adecuado para cada situación.

	Header: El Bucle `for`
	Subheader: Estructura del Bucle `for`
	
	Content:
		El bucle `for` se utiliza cuando se conoce el número exacto de iteraciones que se deben realizar. La sintaxis básica del bucle `for` incluye tres partes: la inicialización, la condición y el incremento/decremento.
		
	Code:
		for (int i = 0; i < 5; i++) {
		    System.out.println("Iteración: " + i);
		}
	
	Content:
		En este ejemplo, el ciclo comienza con `i = 0` y se ejecuta mientras `i` sea menor que 5. Después de cada iteración, `i` se incrementa en 1. Este bucle imprimirá "Iteración: 0" hasta "Iteración: 4".

	Subheader: Uso del Bucle `for` con Arrays
	
	Content:
		El bucle `for` es especialmente útil para iterar sobre arrays y colecciones en Java. Permite acceder a cada elemento del array utilizando el índice.
		
	Code:
		int[] numeros = {1, 2, 3, 4, 5};
		for (int i = 0; i < numeros.length; i++) {
		    System.out.println("Número: " + numeros[i]);
		}

	Content:
		Este bucle recorre el array `numeros` y muestra cada valor almacenado en el array.

	Header: El Bucle `while`
	Subheader: Estructura del Bucle `while`
	
	Content:
		El bucle `while` ejecuta un bloque de código mientras una condición sea verdadera. Es ideal para situaciones en las que no se conoce el número exacto de iteraciones.
		
	Code:
		int i = 0;
		while (i < 5) {
		    System.out.println("Iteración: " + i);
		    i++;
		}
	
	Content:
		Este bucle `while` funciona de manera similar al bucle `for` anterior, pero su estructura es más flexible, permitiendo omitir la inicialización o el incremento dentro del ciclo.

	Subheader: Ejemplo Práctico con `while`
	
	Content:
		El bucle `while` se puede utilizar para pedir datos al usuario repetidamente hasta que se cumpla una condición.
		
	Code:
		import java.util.Scanner;

		Scanner scanner = new Scanner(System.in);
		String entrada = "";

		while (!entrada.equals("salir")) {
		    System.out.println("Escribe algo (escribe 'salir' para terminar): ");
		    entrada = scanner.nextLine();
		    System.out.println("Escribiste: " + entrada);
		}
	
	Content:
		En este ejemplo, el ciclo continúa solicitando al usuario que ingrese un texto hasta que escriba "salir".

	Header: El Bucle `do-while`
	Subheader: Estructura del Bucle `do-while`
	
	Content:
		El bucle `do-while` es similar al `while`, pero la condición se evalúa después de ejecutar el bloque de código. Esto garantiza que el código dentro del bucle se ejecute al menos una vez.
		
	Code:
		int i = 0;
		do {
		    System.out.println("Iteración: " + i);
		    i++;
		} while (i < 5);
	
	Content:
		Este ciclo `do-while` imprimirá los mismos valores que los ciclos anteriores, pero su característica distintiva es que siempre ejecutará el código del bloque al menos una vez, sin importar si la condición es verdadera o falsa inicialmente.

	Subheader: Ejemplo Práctico con `do-while`
	
	Content:
		Un ejemplo común de `do-while` es solicitar confirmación al usuario para continuar o salir de un programa.
		
	Code:
		import java.util.Scanner;

		Scanner scanner = new Scanner(System.in);
		String respuesta;

		do {
		    System.out.println("¿Quieres continuar? (sí/no): ");
		    respuesta = scanner.nextLine();
		} while (respuesta.equalsIgnoreCase("sí"));

	Content:
		En este ejemplo, el programa seguirá preguntando al usuario si quiere continuar mientras la respuesta sea "sí". El ciclo se ejecuta al menos una vez, lo que es ideal para este tipo de situaciones.

	Content:
		Los ciclos en Java son una herramienta poderosa para manejar repeticiones en tu código. Con el conocimiento de `for`, `while`, y `do-while`, puedes elegir la estructura más adecuada para diferentes escenarios. En el siguiente tema, abordaremos la programación orientada a objetos en Java, comenzando con clases y objetos.

	**Recursos adicionales:**
	* [Documentación oficial de Java sobre bucles](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/while.html)

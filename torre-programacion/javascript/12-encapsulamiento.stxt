Document (globalcampus.site/namespace.stxt): Encapsulamiento
	Navigation:
		Previous: Herencia y Polimorfismo (11-herencia-polimorfismo)
		Next: Manipulación del DOM (13-manipulacion-dom)
	Header: Encapsulamiento en JavaScript
	Subheader: ¿Qué es el encapsulamiento?
	
	Content:
		El encapsulamiento es uno de los pilares de la programación orientada a objetos. 
		Se refiere a la práctica de ocultar los detalles internos de un objeto y exponer solo lo necesario para interactuar con él. 
		En JavaScript, el encapsulamiento se logra controlando qué partes de un objeto son accesibles desde el exterior y cuáles no.

	Code:
		// Ejemplo básico de encapsulamiento con funciones
		function Persona(nombre, edad) {
			let _nombre = nombre; // Variable privada
			let _edad = edad; // Variable privada

			this.getNombre = function() {
				return _nombre;
			};

			this.getEdad = function() {
				return _edad;
			};

			this.setEdad = function(nuevaEdad) {
				if (nuevaEdad > 0) {
					_edad = nuevaEdad;
				}
			};
		}

		let persona = new Persona("Carlos", 30);
		console.log(persona.getNombre()); // Output: Carlos
		persona.setEdad(35);
		console.log(persona.getEdad()); // Output: 35

	Subheader: Encapsulamiento con clases
	
	Content:
		Con la introducción de ES6, el uso de clases en JavaScript facilita el encapsulamiento. 
		Las propiedades privadas se pueden simular utilizando convenciones como el uso del guion bajo (`_`) para indicar que una propiedad o método no debe ser accedido directamente desde fuera de la clase.

	Code:
		// Ejemplo de encapsulamiento con clases
		class CuentaBancaria {
			constructor(saldoInicial) {
				this._saldo = saldoInicial; // Propiedad privada simulada
			}

			// Método público para obtener el saldo
			getSaldo() {
				return this._saldo;
			}

			// Método público para depositar dinero
			depositar(cantidad) {
				if (cantidad > 0) {
					this._saldo += cantidad;
				}
			}

			// Método público para retirar dinero
			retirar(cantidad) {
				if (cantidad > 0 && cantidad <= this._saldo) {
					this._saldo -= cantidad;
				}
			}
		}

		let cuenta = new CuentaBancaria(1000);
		cuenta.depositar(500);
		console.log(cuenta.getSaldo()); // Output: 1500
		cuenta.retirar(200);
		console.log(cuenta.getSaldo()); // Output: 1300

	Subheader: Campos privados en ES2021
	
	Content:
		A partir de ES2021, JavaScript introdujo una nueva sintaxis para definir campos privados usando el prefijo `#`. 
		Los campos privados no pueden ser accedidos o modificados directamente desde fuera de la clase.

	Code:
		// Ejemplo de campos privados con ES2021
		class Vehiculo {
			#velocidad; // Campo privado

			constructor(velocidadInicial) {
				this.#velocidad = velocidadInicial;
			}

			// Método público para obtener la velocidad
			getVelocidad() {
				return this.#velocidad;
			}

			// Método público para aumentar la velocidad
			acelerar(incremento) {
				this.#velocidad += incremento;
			}
		}

		let miVehiculo = new Vehiculo(50);
		console.log(miVehiculo.getVelocidad()); // Output: 50
		miVehiculo.acelerar(20);
		console.log(miVehiculo.getVelocidad()); // Output: 70

	Subheader: Métodos accesores: getters y setters
	
	Content:
		En JavaScript, los métodos accesores (getters y setters) se utilizan para obtener o modificar el valor de una propiedad de manera controlada. 
		Esto es especialmente útil cuando se quiere aplicar lógica adicional al leer o escribir en una propiedad.

	Code:
		// Ejemplo de getters y setters
		class Persona {
			constructor(nombre) {
				this._nombre = nombre;
			}

			// Getter
			get nombre() {
				return this._nombre;
			}

			// Setter
			set nombre(nuevoNombre) {
				if (nuevoNombre.length > 0) {
					this._nombre = nuevoNombre;
				}
			}
		}

		let persona = new Persona("Luis");
		console.log(persona.nombre); // Output: Luis
		persona.nombre = "Carlos";
		console.log(persona.nombre); // Output: Carlos

	Subheader: Beneficios del encapsulamiento
	
	Content:
		El encapsulamiento ofrece varios beneficios clave:

		* **Control sobre el acceso a los datos**: Los datos sensibles están protegidos y solo se puede acceder a ellos a través de métodos públicos.
		* **Modularidad**: Permite cambiar la implementación interna de una clase sin afectar otras partes del código.
		* **Mantenimiento**: Facilita la depuración y mejora la legibilidad del código al exponer solo lo esencial para interactuar con los objetos.
		* **Seguridad**: Evita que se manipulen directamente las propiedades críticas de los objetos.

	Code:
		// Ejemplo final mostrando los beneficios del encapsulamiento
		class Usuario {
			constructor(nombre, contrasena) {
				this._nombre = nombre;
				this._contrasena = contrasena;
			}

			// Getter para obtener el nombre
			get nombre() {
				return this._nombre;
			}

			// Método para verificar la contraseña
			verificarContrasena(contrasenaIngresada) {
				return this._contrasena === contrasenaIngresada;
			}
		}

		let usuario = new Usuario("Ana", "123456");
		console.log(usuario.nombre); // Output: Ana
		console.log(usuario.verificarContrasena("123456")); // Output: true
		console.log(usuario.verificarContrasena("abcdef")); // Output: false

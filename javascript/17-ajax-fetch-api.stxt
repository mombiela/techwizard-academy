Document (globalcampus.site/namespace.stxt): AJAX y Fetch API
	Navigation:
		Previous: Promesas y Asincronía (16-promesas-asincronia)
		Next: Módulos en JavaScript (18-modulos-javascript)
	Header: AJAX y Fetch API en JavaScript
	Subheader: Introducción a AJAX
	
	Content:
		**AJAX** (Asynchronous JavaScript and XML) es una técnica que permite actualizar partes de una página web sin tener que recargarla por completo. 
		AJAX combina varias tecnologías, incluyendo JavaScript, XML (aunque hoy en día es más común usar JSON), y el objeto `XMLHttpRequest`, para realizar solicitudes asíncronas al servidor.

		AJAX es fundamental para construir aplicaciones web dinámicas que pueden interactuar con servidores de manera eficiente.

	Code:
		// Ejemplo básico de AJAX con XMLHttpRequest
		let xhr = new XMLHttpRequest();
		xhr.open("GET", "https://api.example.com/datos", true);
		xhr.onreadystatechange = function() {
			if (xhr.readyState === 4 && xhr.status === 200) {
				console.log("Datos recibidos:", xhr.responseText);
			}
		};
		xhr.send();

	Subheader: Uso de la Fetch API
	
	Content:
		La **Fetch API** es una interfaz moderna que reemplaza a `XMLHttpRequest` para realizar solicitudes HTTP. 
		Es más fácil de usar y se basa en promesas, lo que la hace más compatible con código asincrónico moderno.

		La Fetch API permite hacer solicitudes con el método `fetch()`, que devuelve una promesa que se resuelve en un objeto `Response`.

	Code:
		// Ejemplo básico de Fetch API
		fetch("https://api.example.com/datos")
			.then(response => {
				if (!response.ok) {
					throw new Error("Error en la solicitud: " + response.statusText);
				}
				return response.json();
			})
			.then(data => {
				console.log("Datos recibidos:", data);
			})
			.catch(error => {
				console.error("Error:", error);
			});

	Subheader: Envío de datos con Fetch
	
	Content:
		Fetch API también permite enviar datos al servidor utilizando métodos como `POST`. 
		Para enviar datos, se debe incluir un objeto de configuración que especifique el método HTTP, encabezados y el cuerpo de la solicitud.

	Code:
		// Ejemplo de envío de datos con Fetch API
		let datos = {
			nombre: "Juan",
			edad: 30
		};

		fetch("https://api.example.com/usuarios", {
			method: "POST",
			headers: {
				"Content-Type": "application/json"
			},
			body: JSON.stringify(datos)
		})
			.then(response => {
				if (!response.ok) {
					throw new Error("Error en la solicitud: " + response.statusText);
				}
				return response.json();
			})
			.then(data => {
				console.log("Respuesta del servidor:", data);
			})
			.catch(error => {
				console.error("Error:", error);
			});

	Subheader: Manejo de respuestas con Fetch
	
	Content:
		El objeto `Response` devuelto por `fetch()` incluye varios métodos para manejar la respuesta del servidor:

		* `text()` - Devuelve la respuesta como una cadena de texto.
		* `json()` - Analiza la respuesta como JSON y devuelve un objeto JavaScript.
		* `blob()` - Devuelve la respuesta como un objeto Blob.
		* `formData()` - Devuelve la respuesta como un objeto FormData.
		* `arrayBuffer()` - Devuelve la respuesta como un ArrayBuffer.

	Code:
		// Ejemplo de manejo de respuestas con Fetch API
		fetch("https://api.example.com/datos")
			.then(response => {
				if (!response.ok) {
					throw new Error("Error en la solicitud: " + response.statusText);
				}
				return response.text();
			})
			.then(data => {
				console.log("Datos recibidos como texto:", data);
			})
			.catch(error => {
				console.error("Error:", error);
			});

	Subheader: Comparación entre Fetch API y XMLHttpRequest
	
	Content:
		Aunque `XMLHttpRequest` ha sido la forma tradicional de hacer solicitudes AJAX, la Fetch API ofrece varias ventajas:

		* **Simplicidad**: Fetch tiene una sintaxis más sencilla y limpia, basada en promesas.
		* **Manejo de errores**: Fetch maneja los errores de manera más consistente.
		* **Manejo de respuestas**: Fetch facilita el manejo de diferentes tipos de respuesta (texto, JSON, blobs, etc.).
		* **Desventajas**: Fetch no maneja automáticamente los errores de red como `XMLHttpRequest`, que debe manejarse explícitamente con `catch()`.

	Code:
		// Comparación simple
		// XMLHttpRequest
		let xhr = new XMLHttpRequest();
		xhr.open("GET", "https://api.example.com/datos", true);
		xhr.onreadystatechange = function() {
			if (xhr.readyState === 4 && xhr.status === 200) {
				console.log("Datos recibidos con XMLHttpRequest:", xhr.responseText);
			}
		};
		xhr.send();

		// Fetch API
		fetch("https://api.example.com/datos")
			.then(response => response.json())
			.then(data => console.log("Datos recibidos con Fetch:", data))
			.catch(error => console.error("Error:", error));

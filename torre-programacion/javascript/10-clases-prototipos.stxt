Document (globalcampus.site/namespace.stxt): Clases y Prototipos
	Navigation:
		Previous: Manejo de Cadenas de Texto (09-manejo-cadenas)
		Next: Herencia y Polimorfismo (11-herencia-polimorfismo)
	Header: Clases y Prototipos en JavaScript
	Subheader: Introducción a Clases y Prototipos
	
	Content:
		En JavaScript, los objetos pueden ser creados y organizados a través de **clases** y **prototipos**. 
		Estos conceptos son fundamentales en la programación orientada a objetos en JavaScript.

		**Prototipos**: Son la base para la herencia en JavaScript. Cada objeto tiene un enlace interno a otro objeto, llamado su prototipo. 
		Cuando intentas acceder a una propiedad que no existe en un objeto, JavaScript busca en el prototipo de ese objeto, y así sucesivamente.

		**Clases**: Introducidas en ES6, las clases son una forma sintácticamente más conveniente de crear objetos y manejar herencia en JavaScript, 
		basándose en el sistema de prototipos subyacente.

	Code:
		// Ejemplo básico de clase en JavaScript
		class Persona {
			constructor(nombre, edad) {
				this.nombre = nombre;
				this.edad = edad;
			}

			saludar() {
				console.log(`Hola, mi nombre es ${this.nombre} y tengo ${this.edad} años.`);
			}
		}

		// Crear una instancia de la clase Persona
		let persona1 = new Persona("Juan", 30);
		persona1.saludar(); // Output: Hola, mi nombre es Juan y tengo 30 años.

	Subheader: Prototipos en JavaScript
	
	Content:
		En JavaScript, cada objeto tiene una propiedad interna llamada `[[Prototype]]`, que se puede acceder usando `__proto__` o 
		a través de métodos como `Object.getPrototypeOf()` y `Object.setPrototypeOf()`.

		El prototipo de un objeto es otro objeto del cual el primero hereda propiedades y métodos. 
		Esta es la base del modelo de herencia prototípica en JavaScript.

	Code:
		// Ejemplo de prototipo en JavaScript
		function Animal(nombre) {
			this.nombre = nombre;
		}

		Animal.prototype.hablar = function() {
			console.log(`${this.nombre} hace un sonido.`);
		};

		let perro = new Animal("Rex");
		perro.hablar(); // Output: Rex hace un sonido.

	Subheader: Creación de clases en JavaScript
	
	Content:
		Las clases en JavaScript son plantillas para crear objetos. 
		Se definen utilizando la palabra clave `class`, seguida del nombre de la clase. 
		El constructor de la clase se define en el método `constructor()`, y las funciones se definen como métodos dentro de la clase.

	Code:
		// Ejemplo de clase con constructor y métodos
		class Coche {
			constructor(marca, modelo) {
				this.marca = marca;
				this.modelo = modelo;
			}

			arrancar() {
				console.log(`El ${this.marca} ${this.modelo} está arrancando.`);
			}
		}

		// Crear una instancia de la clase Coche
		let miCoche = new Coche("Toyota", "Corolla");
		miCoche.arrancar(); // Output: El Toyota Corolla está arrancando.

	Subheader: Métodos estáticos y de instancia
	
	Content:
		En JavaScript, los métodos de clase pueden ser **métodos de instancia** o **métodos estáticos**:

		* **Métodos de instancia**: Definidos dentro de la clase y disponibles en las instancias de la clase.
		* **Métodos estáticos**: Definidos usando la palabra clave `static`, y no son accesibles desde instancias de la clase, sino directamente desde la clase misma.

	Code:
		// Ejemplo de métodos de instancia y estáticos
		class Calculadora {
			// Método estático
			static sumar(a, b) {
				return a + b;
			}

			// Método de instancia
			restar(a, b) {
				return a - b;
			}
		}

		// Usar el método estático
		let resultadoSuma = Calculadora.sumar(5, 3);
		console.log("Resultado de la suma:", resultadoSuma); // Output: Resultado de la suma: 8

		// Usar el método de instancia
		let calc = new Calculadora();
		let resultadoResta = calc.restar(5, 3);
		console.log("Resultado de la resta:", resultadoResta); // Output: Resultado de la resta: 2

	Subheader: Prototipos vs Clases
	
	Content:
		Antes de la introducción de las clases en ES6, JavaScript utilizaba exclusivamente prototipos para manejar la herencia y la creación de objetos. 
		Con las clases, JavaScript proporciona una sintaxis más familiar para los programadores acostumbrados a lenguajes orientados a objetos como Java o C++.

		Sin embargo, debajo de las clases, JavaScript sigue utilizando el sistema de prototipos para implementar la herencia.

	Code:
		// Ejemplo de herencia prototípica
		function Vehiculo(marca, modelo) {
			this.marca = marca;
			this.modelo = modelo;
		}

		Vehiculo.prototype.arrancar = function() {
			console.log(`El ${this.marca} ${this.modelo} está arrancando.`);
		};

		// Herencia de prototipos
		function Moto(marca, modelo, tipo) {
			Vehiculo.call(this, marca, modelo);
			this.tipo = tipo;
		}

		Moto.prototype = Object.create(Vehiculo.prototype);
		Moto.prototype.constructor = Moto;

		let miMoto = new Moto("Yamaha", "MT-07", "Deportiva");
		miMoto.arrancar(); // Output: El Yamaha MT-07 está arrancando.

	Header: Beneficios de usar clases
	
	Content: 
		Las clases en JavaScript ofrecen varias ventajas:

		* **Claridad y organización**: El código es más fácil de leer y entender, especialmente para aquellos con experiencia en lenguajes orientados a objetos.
		* **Encapsulación**: Permite agrupar datos y métodos relacionados dentro de una misma estructura.
		* **Reutilización**: Facilita la creación de nuevos objetos basados en plantillas comunes, reduciendo la repetición de código.
		* **Herencia simplificada**: Proporciona una forma más clara y directa de implementar la herencia y extender la funcionalidad de clases existentes.

	Code:
		// Ejemplo de herencia con clases
		class Animal {
			constructor(nombre) {
				this.nombre = nombre;
			}

			hacerSonido() {
				console.log(`${this.nombre} hace un sonido.`);
			}
		}

		class Perro extends Animal {
			ladrar() {
				console.log(`${this.nombre} dice guau.`);
			}
		}

		let miPerro = new Perro("Max");
		miPerro.hacerSonido(); // Output: Max hace un sonido.
		miPerro.ladrar(); // Output: Max dice guau.

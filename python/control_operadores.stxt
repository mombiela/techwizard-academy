Document (globalcampus.site/namespace.stxt): Operadores Aritméticos
	
	Content: 
	    Estos operadores se utilizan para realizar operaciones matemáticas comunes.
	    
	    | Operador     | Descripción     |Ejemplo    |
	    | -------------|-----------------|-----------|
	    | ```code:+```   | Suma            | ```code:a + b``` |
	    | ```code:-```   | Resta           | ```code:a - b``` |
	    | ```code:*```   | Multiplicación  | ```code:a * b``` |
	    | ```code:/```   | División        | ```code:a / b``` |
	    | ```code:%```   | Módulo          | ```code:a % b``` |
	    | ```code:**```  | Exponenciación  | ```code:a ** b``` |
	    | ```code://```  | División entera | ```code:a // b``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = 10
	    b = 3
	    print(a + b)  # 13
	    print(a - b)  # 7
	    print(a * b)  # 30
	    print(a / b)  # 3.3333333333333335
	    print(a % b)  # 1
	    print(a ** b) # 1000
	    print(a // b) # 3
	

	Header: Operadores de Asignación
	
	Content: 
	    Estos operadores se utilizan para asignar valores a las variables.
	    
	    | Operador    | Descripción                 | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```code:=```   | Asignación                   | ```code:a = 5``` |
	    | ```code:+=```  | Suma y asignación            | ```code:a += 3``` |
	    | ```code:-=```  | Resta y asignación           | ```code:a -= 3``` |
	    | ```code:*=```  | Multiplicación y asignación  | ```code:a *= 3``` |
	    | ```code:/=```  | División y asignación        | ```code:a /= 3``` |
	    | ```code:%=```  | Módulo y asignación          | ```code:a %= 3``` |
	    | ```code://=``` | División entera y asignación | ```code:a //= 3``` |
	    | ```code:**=``` | Exponenciación y asignación  | ```code:a **= 3``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = 5
	    a += 2  # a = a + 2
	    print(a)  # 7
	    a *= 3  # a = a * 3
	    print(a)  # 21

	Header: Operadores de Comparación
	
	Content: 
	    Estos operadores se utilizan para comparar dos valores.
	    
	    | Operador    | Descripción     | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```code:==``` | Igual a           | ```code:a == b``` |
	    | ```code:!=``` | No igual a        | ```code:a != b``` |
	    | ```code:>```  | Mayor que         | ```code:a > b``` |
	    | ```code:<```  | Menor que         | ```code:a < b``` |
	    | ```code:>=``` | Mayor o igual que | ```code:a >= b``` |
	    | ```code:<=``` | Menor o igual que | ```code:a <= b``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = 5
	    b = 3
	    print(a == b)  # False
	    print(a != b)  # True
	    print(a > b)   # True
	    print(a < b)   # False

	Header: Operadores Lógicos
	
	Content: 
	    Estos operadores se utilizan para combinar sentencias condicionales.
	    
	    | Operador    | Descripción                 | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```code:and``` | Y lógico        | ```code:a and b``` |
	    | ```code:or```  | O lógico        | ```code:a or b``` |
	    | ```code:not``` | Negación lógica | ```code:not a``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = True
	    b = False
	    print(a and b)  # False
	    print(a or b)   # True
	    print(not a)    # False
	

	Header: Operadores de Identidad
	
	Content: 
	    Estos operadores se utilizan para comparar objetos.
	    
	    | Operador    | Descripción                 | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```code:is```     | Es el mismo objeto    | ```code:a is b``` |
	    | ```code:is not``` | No es el mismo objeto | ```code:a is not b``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = [1, 2, 3]
	    b = a
	    c = [1, 2, 3]
	    print(a is b)    # True
	    print(a is c)    # False
	    print(a is not c) # True

	Header: Operadores de Pertenencia
	
	Content: 
	    Estos operadores se utilizan para verificar si un valor o variable está presente en una secuencia (como una lista, tupla, diccionario, etc.).
	    
	    | Operador    | Descripción                 | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```code:in```     | Está presente en    | ```code:a in b``` |
	    | ```code:not``` in | No está presente en | ```code:a not in b``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = [1, 2, 3]
	    print(2 in a)     # True
	    print(4 not in a) # True

	Header: Operadores Bit a Bit
	
	Content: 
	    Estos operadores se utilizan para comparar (operar) los números a nivel de bits.
	    
	    | Operador    | Descripción       | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```code:&```   | AND bit a bit      | ```code:a & b``` |
	    | ```code:|```   | OR bit a bit       | ```code:a | b``` |
	    | ```code:^```   | XOR bit a bit      | ```code:a ^ b``` |
	    | ```code: ~ ``` | NOT bit a bit      | ```code: ~a ``` |
	    | ```code:<<```  | Desplazamiento izq | ```code:a << b``` |
	    | ```code:>>```  | Desplazamiento der | ```code:a >> b``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = 60    # 60 = 0011 1100
	    b = 13    # 13 = 0000 1101
	    print(a & b)  # 12 = 0000 1100
	    print(a | b)  # 61 = 0011 1101
	    print(a ^ b)  # 49 = 0011 0001
	    print(~a)     # -61 = 1100 0011
	    print(a << 2) # 240 = 1111 0000
	    print(a >> 2) # 15 = 0000 1111

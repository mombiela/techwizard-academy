Document (globalcampus.site/namespace.stxt): Apertura y cierre de archivos
	
	Content: 
	Header: Apertura y cierre de archivos
	
	Content:
	    
	    Trabajar con archivos en Python implica principalmente abrirlos, leer o escribir datos en ellos y luego cerrarlos. Python proporciona funciones y métodos específicos para estas operaciones, permitiendo un manejo seguro y eficiente de los archivos.
	    
	Header: Apertura de Archivos
	
	Content:
	    
	    Para abrir un archivo en Python, se utiliza la función ```open()```, que devuelve un objeto de archivo. Esta función toma dos argumentos principales: el nombre del archivo y el modo en el que se quiere abrir.
	    
	    Modos comunes de apertura:
	    *  ```'r'```: Lectura (modo predeterminado). El archivo debe existir.
	    *  ```'w'```: Escritura. Crea un archivo nuevo o sobrescribe el existente.
	    *  ```'a'```: Añadir. Abre el archivo para añadir datos al final sin sobrescribir.
	    *  ```'b'```: Modo binario. Se usa junto con otros modos (por ejemplo, ```'rb'```, ```'wb'```).
	    
	    Ejemplo:
	Code:
	    archivo = open("ejemplo.txt", "r")
	
	
	Content:
	    
	Header: Lectura de Archivos
	
	Content:
	    
	    Existen varias formas de leer datos desde un archivo.
	    
	    *  ```read()```: Lee todo el contenido del archivo.
	Code:
	    contenido = archivo.read()
	
	
	Content:
	    
	    *  ```readline()```: Lee una sola línea del archivo.
	Code:
	    linea = archivo.readline()
	
	
	Content:
	    
	    *  ```readlines()```: Lee todas las líneas del archivo y devuelve una lista.
	Code:
	    lineas = archivo.readlines()
	
	
	Content:
	    
	Header: Escritura en Archivos
	
	Content:
	    
	    Para escribir datos en un archivo, se puede usar el modo ```'w'``` o ```'a'``` y los métodos de escritura.
	    
	    *  ```write()```: Escribe una cadena en el archivo.
	Code:
	    archivo = open("ejemplo.txt", "w")
	    archivo.write("Hola, mundo!")
	
	
	Content:
	    
	    *  ```writelines()```: Escribe una lista de cadenas en el archivo.
	Code:
	    lineas = ["Primera línea\n", "Segunda línea\n"]
	    archivo.writelines(lineas)
	
	
	Content:
	    
	Header: Cierre de Archivos
	
	Content:
	    
	    Es importante cerrar los archivos después de haber terminado de trabajar con ellos para liberar recursos.
	    
	    Se cierra un archivo usando el método ```close()```.
	Code:
	    archivo.close()
	
	
	Content:
	    
	Header: Gestión de Archivos con @@with@@
	
	Content:
	    
	    El uso de ```with``` asegura que los archivos se cierren correctamente después de su uso, incluso si ocurre una excepción. Esta es la forma recomendada de manejar archivos.
	    
	    Ejemplo:
	Code:
	    with open("ejemplo.txt", "r") as archivo:
	    contenido = archivo.read()
	    # No es necesario cerrar el archivo
	
	
	Content:
	    
	Header: Modos Adicionales de Apertura
	
	Content:
	    
	    *  ```'r+'```: Lectura y escritura. El archivo debe existir.
	    *  ```'w+'```: Escritura y lectura. Sobrescribe el archivo existente o crea uno nuevo.
	    *  ```'a+'```: Añadir y lectura. Crea el archivo si no existe.
	    
	    Ejemplo:
	Code:
	    # Lectura y escritura
	    archivo = open("ejemplo.txt", "r+")
	    contenido = archivo.read()
	    archivo.write("Nueva línea")
	    archivo.close()
	
	
	Content:
	    
	Header: Lectura y Escritura de Archivos Binarios
	
	Content:
	    
	    Para trabajar con archivos binarios, se utilizan los modos ```'rb'``` y ```'wb'```.
	    
	    Ejemplo de lectura binaria:
	Code:
	    with open("imagen.png", "rb") as archivo:
	    contenido = archivo.read()
	
	
	Content:
	    
	    Ejemplo de escritura binaria:
	Code:
	    with open("copia_imagen.png", "wb") as archivo:
	    archivo.write(contenido)
	
	
	Content:
	    
	Header: Ventajas de la Gestión de Archivos
	
	Content:
	    
	    *  **Eficiencia y Seguridad**: El uso de ```with``` asegura que los archivos se cierren adecuadamente, evitando pérdidas de datos y liberando recursos.
	    *  **Flexibilidad**: Diferentes modos de apertura permiten una gran variedad de operaciones de lectura y escritura.
	    *  **Compatibilidad**: Python permite trabajar con archivos de texto y binarios de manera sencilla.

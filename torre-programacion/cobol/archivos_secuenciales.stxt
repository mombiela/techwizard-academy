Document (globalcampus.site/namespace.stxt): Trabajo con archivos secuenciales
	
	Content: 
	    En COBOL, el manejo de archivos secuenciales es una tarea común que implica la lectura y escritura de datos en un orden específico. Los archivos secuenciales son uno de los tipos de archivos más utilizados y se gestionan mediante la División de Archivo (File Section) y la División de Procedimiento (Procedure Division).
	    
	Header: Definición de la División de Archivo
	
	Content:
	    
	    La División de Archivo en COBOL se utiliza para definir los archivos que se van a utilizar en el programa. Aquí se especifican los nombres lógicos de los archivos, el tipo de organización (secuencial, en este caso) y las descripciones de los registros.
	    
	Subheader: Ejemplo de definición de archivo
	
	Content:
	    
	Code:
	    FILE CONTROL.
	    SELECT Entrada-Archivo ASSIGN TO 'ENTRADA.TXT'
	    ORGANIZATION IS LINE SEQUENTIAL.
	    
	    DATA DIVISION.
	    FILE SECTION.
	    FD Entrada-Archivo.
	    01 Registro-Entrada.
	    05 Campo1 PIC X(10).
	    05 Campo2 PIC 9(5).
	
	
	Content:
	    
	    En este ejemplo:
	    
	    *  ```FILE CONTROL``` define el archivo lógico ```Entrada-Archivo``` y lo asigna al archivo físico 'ENTRADA.TXT'.
	    *  ```ORGANIZATION IS LINE SEQUENTIAL``` indica que el archivo es secuencial.
	    *  ```FD Entrada-Archivo``` define el formato del archivo.
	    *  ```01 Registro-Entrada``` define la estructura del registro del archivo.
	    
	Header: Apertura y cierre de archivos
	
	Content:
	    
	    Antes de realizar cualquier operación de lectura o escritura, los archivos deben ser abiertos con la sentencia ```OPEN``` y cerrados al finalizar con la sentencia ```CLOSE```.
	    
	Subheader: Ejemplo de apertura y cierre de archivos
	
	Content:
	    
	Code:
	    PROCEDURE DIVISION.
	    OPEN INPUT Entrada-Archivo.
	    PERFORM Leer-Registros.
	    CLOSE Entrada-Archivo.
	    STOP RUN.
	
	
	Content:
	    
	    En este ejemplo:
	    
	    *  ```OPEN INPUT Entrada-Archivo``` abre el archivo para lectura.
	    *  ```PERFORM Leer-Registros``` llama a un procedimiento para leer los registros.
	    *  ```CLOSE Entrada-Archivo``` cierra el archivo al finalizar.
	    
	Header: Lectura de archivos secuenciales
	
	Content:
	    
	    La lectura de archivos secuenciales se realiza utilizando la sentencia ```READ``` en un bucle que continúa hasta el final del archivo.
	    
	Subheader: Ejemplo de lectura de registros
	
	Content:
	    
	Code:
	    PROCEDURE DIVISION.
	    Leer-Registros.
	    READ Entrada-Archivo INTO Registro-Entrada
	    AT END SET Fin-De-Archivo TO TRUE
	    NOT AT END
	    DISPLAY Campo1 Campo2
	    END-READ
	    PERFORM UNTIL Fin-De-Archivo
	    READ Entrada-Archivo INTO Registro-Entrada
	    AT END SET Fin-De-Archivo TO TRUE
	    NOT AT END
	    DISPLAY Campo1 Campo2
	    END-READ
	    END-PERFORM.
	
	
	Content:
	    
	    En este ejemplo:
	    
	    *  La sentencia ```READ Entrada-Archivo INTO Registro-Entrada``` lee un registro del archivo.
	    *  ```AT END``` se utiliza para detectar el final del archivo y establecer la condición ```Fin-De-Archivo```.
	    *  Los registros se muestran utilizando ```DISPLAY```.
	    
	Header: Escritura en archivos secuenciales
	
	Content:
	    
	    Para escribir en archivos secuenciales, se utiliza la sentencia ```WRITE``` después de abrir el archivo en modo de salida.
	    
	Subheader: Ejemplo de escritura de registros
	
	Content:
	    
	Code:
	    FILE CONTROL.
	    SELECT Salida-Archivo ASSIGN TO 'SALIDA.TXT'
	    ORGANIZATION IS LINE SEQUENTIAL.
	    
	    DATA DIVISION.
	    FILE SECTION.
	    FD Salida-Archivo.
	    01 Registro-Salida.
	    05 Campo1 PIC X(10).
	    05 Campo2 PIC 9(5).
	    
	    PROCEDURE DIVISION.
	    OPEN OUTPUT Salida-Archivo.
	    MOVE 'Ejemplo' TO Campo1.
	    MOVE 12345 TO Campo2.
	    WRITE Registro-Salida FROM Campo1 Campo2.
	    CLOSE Salida-Archivo.
	    STOP RUN.
	
	
	Content:
	    
	    En este ejemplo:
	    
	    *  ```FILE CONTROL``` define el archivo lógico ```Salida-Archivo```.
	    *  ```OPEN OUTPUT Salida-Archivo``` abre el archivo para escritura.
	    *  ```WRITE Registro-Salida FROM Campo1 Campo2``` escribe el registro en el archivo.
	    *  ```CLOSE Salida-Archivo``` cierra el archivo al finalizar.
	    
	Header: Manejo de errores en operaciones con archivos
	
	Content:
	    
	    Es importante manejar los posibles errores durante las operaciones con archivos. COBOL proporciona el uso de ```FILE STATUS``` para capturar y manejar estos errores.
	    
	Subheader: Ejemplo de manejo de errores con FILE STATUS
	
	Content:
	    
	Code:
	    FILE CONTROL.
	    SELECT Entrada-Archivo ASSIGN TO 'ENTRADA.TXT'
	    ORGANIZATION IS LINE SEQUENTIAL
	    FILE STATUS IS WS-File-Status.
	    
	    DATA DIVISION.
	    FILE SECTION.
	    FD Entrada-Archivo.
	    01 Registro-Entrada.
	    05 Campo1 PIC X(10).
	    05 Campo2 PIC 9(5).
	    
	    WORKING-STORAGE SECTION.
	    01 WS-File-Status PIC XX.
	    
	    PROCEDURE DIVISION.
	    OPEN INPUT Entrada-Archivo.
	    IF WS-File-Status NOT = '00'
	    DISPLAY 'Error abriendo archivo: ' WS-File-Status.
	    END-IF.
	    CLOSE Entrada-Archivo.
	    STOP RUN.
	
	
	Content:
	    
	    En este ejemplo:
	    
	    *  ```FILE STATUS IS WS-File-Status``` define una variable para capturar el estado del archivo.
	    *  Se verifica ```WS-File-Status``` después de abrir el archivo para manejar cualquier error que ocurra.
	    
	Header: Conclusión
	
	Content:
	    
	    El trabajo con archivos secuenciales en COBOL es fundamental para muchas aplicaciones de negocio. Comprender cómo definir, abrir, cerrar, leer y escribir archivos secuenciales, así como manejar errores, es esencial para desarrollar programas COBOL robustos y eficientes.

Document (globalcampus.site/namespace.stxt): Manejo de excepciones (try, except, finally)
	
	Text: 
	Header: Manejo de excepciones (try, except, finally) en Python
	
	Text:
	    
	    El manejo de excepciones en Python permite controlar los errores que pueden ocurrir durante la ejecución de un programa. Usando las estructuras ```try```, ```except```, y ```finally```, se puede gestionar de manera adecuada estos errores, asegurando que el programa pueda manejar situaciones inesperadas sin detenerse abruptamente.
	    
	Header: Estructura Básica
	
	Text:
	    
	    La estructura básica para el manejo de excepciones es la siguiente:
	    
	Code:
	    try:
	    # Código que puede producir una excepción
	    except TipoDeExcepcion:
	    # Código que se ejecuta si ocurre la excepción
	    finally:
	    # Código que se ejecuta siempre, ocurra o no una excepción
	
	
	Text:
	    
	Header: Bloque try
	
	Text:
	    
	    El bloque ```try``` contiene el código que puede producir una excepción. Si no ocurre ninguna excepción, el bloque ```except``` es ignorado y el programa continúa con la siguiente instrucción después del bloque ```try```.
	    
	    Ejemplo:
	Code:
	    try:
	    resultado = 10 / 2
	    print("El resultado es:", resultado)
	    except ZeroDivisionError:
	    print("Error: División por cero.")
	
	
	Text:
	    
	Header: Bloque except
	
	Text:
	    
	    El bloque ```except``` se ejecuta si ocurre una excepción en el bloque ```try```. Se puede especificar el tipo de excepción a capturar.
	    
	    Ejemplo:
	Code:
	    try:
	    resultado = 10 / 0
	    except ZeroDivisionError:
	    print("Error: División por cero.")
	
	
	Text:
	    
	    También se pueden capturar múltiples excepciones especificándolas en una tupla.
	Code:
	    try:
	    resultado = 10 / 0
	    except (ZeroDivisionError, TypeError):
	    print("Error: Ocurrió una excepción.")
	
	
	Text:
	    
	    Se puede capturar cualquier excepción usando un bloque ```except``` sin especificar el tipo de excepción.
	Code:
	    try:
	    resultado = 10 / 0
	    except:
	    print("Error: Ocurrió una excepción.")
	
	
	Text:
	    
	Header: Bloque else
	
	Text:
	    
	    El bloque ```else``` se ejecuta si no ocurre ninguna excepción en el bloque ```try```.
	Code:
	    try:
	    resultado = 10 / 2
	    except ZeroDivisionError:
	    print("Error: División por cero.")
	    else:
	    print("El resultado es:", resultado)
	
	
	Text:
	    
	Header: Bloque finally
	
	Text:
	    
	    El bloque ```finally``` contiene el código que se ejecuta siempre, ocurra o no una excepción. Es útil para liberar recursos o realizar tareas de limpieza.
	    
	    Ejemplo:
	Code:
	    try:
	    archivo = open("datos.txt", "r")
	    contenido = archivo.read()
	    except FileNotFoundError:
	    print("Error: Archivo no encontrado.")
	    finally:
	    archivo.close()
	
	
	Text:
	    
	Header: Lanzar Excepciones
	
	Text:
	    
	    Se pueden lanzar excepciones manualmente usando la palabra clave ```raise```.
	Code:
	    raise ValueError("Este es un error personalizado.")
	
	
	Text:
	    
	Header: Definir Excepciones Personalizadas
	
	Text:
	    
	    Se pueden definir excepciones personalizadas creando una nueva clase que herede de la clase base ```Exception```.
	Code:
	    class MiExcepcion(Exception):
	    def init(self, mensaje):
	    self.mensaje = mensaje
	    
	    try:
	    raise MiExcepcion("Ocurrió un error personalizado.")
	    except MiExcepcion as e:
	    print(e.mensaje)
	
	
	Text:
	    
	Header: Ventajas del Manejo de Excepciones
	
	Text:
	    
	    *  **Robustez**: Permite que el programa continúe ejecutándose o se cierre de manera controlada en caso de errores.
	    *  **Claridad**: Mejora la legibilidad del código al separar la lógica de manejo de errores del flujo principal del programa.
	    *  **Mantenimiento**: Facilita la identificación y corrección de errores, y permite añadir nuevas excepciones de manera sencilla.

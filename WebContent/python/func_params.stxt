Unit(globalcampus.site/namespace.stxt):

	h1: Parámetros y argumentos
	
	Text: 
	    En Python, los términos "parámetros" y "argumentos" se usan frecuentemente en el contexto de funciones. Aunque a menudo se usan indistintamente, tienen significados ligeramente diferentes.
	    
	h2: Parámetros
	
	Text:
	    
	    Los //parámetros// son variables listadas dentro de los paréntesis en la definición de una función. Sirven como marcadores de posición que indican qué tipo de valores recibirá la función.
	    
	    Ejemplo:
	Code:
	    def mi_funcion(parametro1, parametro2):
	    print(parametro1, parametro2)
	
	
	Text:
	    
	    En este ejemplo, ```parametro1``` y ```parametro2``` son parámetros.
	    
	h2: Argumentos
	
	Text:
	    
	    Los //argumentos// son los valores reales que se pasan a la función cuando se llama. Estos valores se asignan a los parámetros correspondientes en la definición de la función.
	    
	    Ejemplo:
	Code:
	    mi_funcion(10, 20)
	
	
	Text:
	    
	    Aquí, ```10``` y ```20``` son argumentos que se pasan a la función ```mi_funcion```.
	    
	h2: Tipos de Argumentos
	
	Text:
	    
	    *  **Argumentos Posicionales**: Se asignan a los parámetros según su posición en la llamada a la función.
	    *  **Argumentos Nombrados**: Se pasan usando el nombre del parámetro, lo que permite cambiar el orden de los argumentos.
	    *  **Argumentos por Defecto**: Los parámetros pueden tener valores por defecto que se usan si no se proporciona un argumento correspondiente en la llamada a la función.
	    *  **Argumentos Arbitrarios**: Se usan para pasar un número variable de argumentos.
	    
	    Ejemplos:
	    
	    Argumentos Posicionales:
	Code:
	    def saludar(nombre, mensaje):
	    print(f"Hola, {nombre}! {mensaje}")
	    saludar("Alice", " Cómo estás?")
	
	
	Text:
	    
	    Argumentos Nombrados:
	Code:
	    saludar(mensaje=" Cómo estás?", nombre="Alice")
	
	
	Text:
	    
	    Argumentos por Defecto:
	Code:
	    def saludar(nombre, mensaje=" Cómo estás?"):
	    print(f"Hola, {nombre}! {mensaje}")
	    
	    saludar("Alice")
	
	
	Text:
	    
	    Argumentos Arbitrarios:
	Code:
	    def imprimir_numeros(*numeros):
	    for numero in numeros:
	    print(numero)
	    imprimir_numeros(1, 2, 3, 4, 5)
	
	
	Text:
	    
	    En el último ejemplo, ```*numeros``` permite que la función ```imprimir_numeros``` acepte cualquier número de argumentos.
	    
	h2: Parámetros Especiales en Python
	
	Text:
	    
	    En Python 3.8 y versiones posteriores, se pueden usar parámetros especiales para indicar cómo deben ser pasados los argumentos.
	    
	    *  **Parámetros Posicionales-únicamente**: Se definen usando una barra inclinada (/) en la definición de la función.
	    *  **Parámetros Nombrados-únicamente**: Se definen usando un asterisco (*) en la definición de la función.
	    
	    Ejemplo:
	Code:
	    def mi_funcion(a, b, /, c, *, d):
	    print(a, b, c, d)
	    
	    mi_funcion(1, 2, c=3, d=4)
	
	
	Text:
	    
	    En este caso, ```a``` y ```b``` deben pasarse como argumentos posicionales, mientras que ```c``` y ```d``` deben pasarse como argumentos nombrados.

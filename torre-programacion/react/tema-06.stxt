Document (globalcampus.site/namespace.stxt): Manejo de Eventos
	Navigation:
		Previous: Anterior (tema-05)
		Next: Siguiente (tema-07)
		
	Header: Introducción
	Subheader: ¿Qué son los eventos en React?
	Content:
		En React, los eventos son acciones o sucesos que ocurren en la interfaz de usuario, como clics de botones, cambios en campos de texto, o desplazamientos del ratón. React utiliza un sistema de manejo de eventos similar al de HTML estándar, pero con algunas diferencias importantes, como el uso de camelCase para los nombres de eventos y la posibilidad de usar funciones para manejar esos eventos.

	Header: Añadir Eventos en Componentes
	Subheader: Eventos en Componentes Funcionales
	Content:
		En componentes funcionales, los eventos se manejan directamente mediante la asignación de funciones a los atributos de evento, como `onClick` o `onChange`.
	Code:
		// Ejemplo de un evento onClick en un componente funcional
		function Boton() {
			function manejarClick() {
				alert('Botón clickeado');
			}
			
			return (
				<button onClick={manejarClick}>
					Haz clic aquí
				</button>
			);
		}

	Subheader: Eventos en Componentes de Clase
	Content:
		En componentes de clase, los eventos también se manejan asignando funciones a los atributos de evento, pero es común que estas funciones necesiten ser enlazadas al contexto del componente para acceder a `this`.
	Code:
		// Ejemplo de un evento onClick en un componente de clase
		class Boton extends React.Component {
			constructor(props) {
				super(props);
				this.manejarClick = this.manejarClick.bind(this);
			}
			
			manejarClick() {
				alert('Botón clickeado');
			}
			
			render() {
				return (
					<button onClick={this.manejarClick}>
						Haz clic aquí
					</button>
				);
			}
		}

	Header: Eventos Comunes en React
	Subheader: onChange
	Content:
		El evento `onChange` se usa para detectar cambios en elementos de formulario, como campos de texto o selectores.
	Code:
		// Ejemplo de onChange en un campo de texto
		function Formulario() {
			const [valor, setValor] = useState('');
			
			function manejarCambio(evento) {
				setValor(evento.target.value);
			}
			
			return (
				<input type="text" value={valor} onChange={manejarCambio} />
			);
		}

	Subheader: onSubmit
	Content:
		El evento `onSubmit` se utiliza para manejar el envío de formularios.
	Code:
		// Ejemplo de onSubmit en un formulario
		function Formulario() {
			function manejarEnvio(evento) {
				evento.preventDefault();
				alert('Formulario enviado');
			}
			
			return (
				<form onSubmit={manejarEnvio}>
					<button type="submit">Enviar</button>
				</form>
			);
		}

	Header: Pasando Argumentos a los Manejadores de Eventos
	Subheader: Manejadores de Eventos con Argumentos
	Content:
		A veces es necesario pasar argumentos adicionales a los manejadores de eventos. Esto se puede lograr mediante el uso de funciones flecha o el método `bind`.
	Code:
		// Ejemplo de pasando argumentos con una función flecha
		function ListaElementos() {
			function manejarClick(id) {
				alert('Elemento ' + id + ' clickeado');
			}
			
			return (
				<ul>
					<li onClick={() => manejarClick(1)}>Elemento 1</li>
					<li onClick={() => manejarClick(2)}>Elemento 2</li>
				</ul>
			);
		}

	Header: Conclusión
	Subheader: Resumen del Manejo de Eventos en React
	Content:
		El manejo de eventos en React es un aspecto esencial para crear interfaces interactivas. React ofrece un sistema de eventos sintético que es compatible entre navegadores y proporciona una forma consistente de trabajar con eventos. Dominar cómo agregar y manejar eventos en componentes funcionales y de clase es fundamental para construir aplicaciones React robustas y dinámicas. En los próximos temas, exploraremos otros aspectos avanzados de React, como el renderizado condicional y el trabajo con listas.

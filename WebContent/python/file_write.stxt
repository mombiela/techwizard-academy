Document (globalcampus.site/namespace.stxt): Lectura y escritura de archivos
	
	Text: 
	Header: Lectura y escritura de archivos
	
	Text:
	    
	    Python proporciona funciones y métodos que facilitan la lectura y escritura de archivos. A continuación, se detallan las operaciones básicas para manejar archivos de texto y archivos binarios.
	    
	Header: Apertura de Archivos
	
	Text:
	    
	    Para abrir un archivo en Python, se utiliza la función ```open()```. Esta función acepta dos parámetros principales: el nombre del archivo y el modo de apertura.
	    
	    Modos comunes de apertura:
	    *  ```'r'```: Lectura (modo predeterminado). El archivo debe existir.
	    *  ```'w'```: Escritura. Crea un archivo nuevo o sobrescribe el existente.
	    *  ```'a'```: Añadir. Abre el archivo para añadir datos al final sin sobrescribir.
	    *  ```'b'```: Modo binario. Se usa junto con otros modos (por ejemplo, ```'rb'```, ```'wb'```).
	    
	    Ejemplo:
	Code:
	    archivo = open("ejemplo.txt", "r")
	
	
	Text:
	    
	Header: Lectura de Archivos
	
	Text:
	    
	    Para leer datos de un archivo, se pueden usar varios métodos dependiendo de las necesidades:
	    
	    *  ```read()```: Lee todo el contenido del archivo como una cadena.
	Code:
	    contenido = archivo.read()
	
	
	Text:
	    
	    *  ```readline()```: Lee una sola línea del archivo.
	Code:
	    linea = archivo.readline()
	
	
	Text:
	    
	    *  ```readlines()```: Lee todas las líneas del archivo y las devuelve como una lista.
	Code:
	    lineas = archivo.readlines()
	
	
	Text:
	    
	    Ejemplo completo:
	Code:
	    with open("ejemplo.txt", "r") as archivo:
	    contenido = archivo.read()
	    print(contenido)
	
	
	Text:
	    
	Header: Escritura en Archivos
	
	Text:
	    
	    Para escribir datos en un archivo, se pueden usar varios métodos:
	    
	    *  ```write()```: Escribe una cadena en el archivo.
	Code:
	    with open("ejemplo.txt", "w") as archivo:
	    archivo.write("Hola, mundo!")
	
	
	Text:
	    
	    *  ```writelines()```: Escribe una lista de cadenas en el archivo.
	Code:
	    lineas = ["Primera línea\n", "Segunda línea\n"]
	    with open("ejemplo.txt", "w") as archivo:
	    archivo.writelines(lineas)
	
	
	Text:
	    
	Header: Añadir Datos a un Archivo
	
	Text:
	    
	    Para añadir datos al final de un archivo sin sobrescribir el contenido existente, se utiliza el modo ```'a'```.
	Code:
	    with open("ejemplo.txt", "a") as archivo:
	    archivo.write("Añadiendo nueva línea.")
	
	
	Text:
	    
	Header: Lectura y Escritura de Archivos Binarios
	
	Text:
	    
	    Para trabajar con archivos binarios, se utilizan los modos ```'rb'``` y ```'wb'```.
	    
	    Ejemplo de lectura binaria:
	Code:
	    with open("imagen.png", "rb") as archivo:
	    contenido = archivo.read()
	
	
	Text:
	    
	    Ejemplo de escritura binaria:
	Code:
	    with open("copia_imagen.png", "wb") as archivo:
	    archivo.write(contenido)
	
	
	Text:
	    
	Header: Gestión de Archivos con @@with@@
	
	Text:
	    
	    El uso de ```with``` para abrir archivos es una práctica recomendada, ya que asegura que los archivos se cierren correctamente después de su uso, incluso si ocurre una excepción.
	    
	    Ejemplo:
	Code:
	    with open("ejemplo.txt", "r") as archivo:
	    contenido = archivo.read()
	    # No es necesario cerrar el archivo
	
	
	Text:
	    
	Header: Ventajas del Manejo de Archivos en Python
	
	Text:
	    
	    *  **Eficiencia y Seguridad**: El uso de ```with``` asegura que los archivos se cierren adecuadamente, evitando pérdidas de datos y liberando recursos.
	    *  **Flexibilidad**: Diferentes modos de apertura permiten una gran variedad de operaciones de lectura y escritura.
	    *  **Compatibilidad con Textos y Binarios**: Python permite trabajar con archivos de texto y binarios de manera sencilla.
	    
	Header: Ejemplo Completo
	
	Text:
	    
	    Aquí tienes un ejemplo completo que muestra la apertura, lectura, escritura y cierre de archivos:
	    
	Code:
	    # Escribir datos en un archivo
	    with open("ejemplo.txt", "w") as archivo:
	    archivo.write("Primera línea\n")
	    archivo.write("Segunda línea\n")
	    
	    # Leer datos de un archivo
	    with open("ejemplo.txt", "r") as archivo:
	    contenido = archivo.read()
	    print("Contenido del archivo:")
	    print(contenido)
	    
	    # Añadir datos a un archivo
	    with open("ejemplo.txt", "a") as archivo:
	    archivo.write("Añadiendo tercera línea.\n")
	    
	    # Leer línea por línea
	    with open("ejemplo.txt", "r") as archivo:
	    for linea in archivo:
	    print(linea.strip())
	
	
	Text:

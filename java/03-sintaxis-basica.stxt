Document (globalcampus.site/namespace.stxt): Sintaxis Básica de Java
	Navigation:
		Previous: Configuración del Entorno de Desarrollo (02-configuracion-entorno)
		Next: Operadores y Expresiones (04-operadores-expresiones)
	
	Header: Estructura de un Programa en Java
	Subheader: Componentes Básicos de un Programa
	
	Content:
		Un programa en Java se compone de varias partes clave que debes conocer para comenzar a escribir código. La estructura básica incluye:
		
		* **Clase**: Todo el código en Java debe estar contenido dentro de una clase.
		* **Método `main`**: Es el punto de entrada de cualquier programa Java. Se define como `public static void main(String[] args)`.
		* **Declaraciones y Sentencias**: Instrucciones que indican al programa lo que debe hacer.

		**Ejemplo de estructura básica:**
		```java
		public class MiPrograma {
		    public static void main(String[] args) {
		        System.out.println("¡Hola, Java!");
		    }
		}
		```

	Subheader: Comentarios en Java
	
	Content:
		Los comentarios son textos que no se ejecutan como código y sirven para documentar el código o desactivar temporalmente una línea:
		
		* **Comentarios de una línea**: Comienzan con `//`.
		* **Comentarios de múltiples líneas**: Están encerrados entre `/*` y `*/`.
		* **Comentarios Javadoc**: Comienzan con `/**` y se utilizan para documentar APIs.
		
		**Ejemplo de comentarios:**
		```java
		// Esto es un comentario de una línea
		/*
		  Esto es un comentario
		  de múltiples líneas
		*/
		/**
		 * Este es un comentario Javadoc
		 */
		```

	Header: Tipos de Datos en Java
	Subheader: Tipos de Datos Primitivos
	
	Content:
		Java soporta ocho tipos de datos primitivos que se utilizan para representar valores simples:
		
		* **Enteros**:
			- `byte`: 8 bits
			- `short`: 16 bits
			- `int`: 32 bits
			- `long`: 64 bits
		* **Punto Flotante**:
			- `float`: 32 bits
			- `double`: 64 bits
		* **Otros**:
			- `char`: 16 bits, representa un carácter Unicode
			- `boolean`: Representa `true` o `false`
		
		**Ejemplos de declaración de variables:**
		```java
		int numero = 10;
		double decimal = 3.14;
		char letra = 'A';
		boolean esVerdadero = true;
		```
		
	Subheader: Variables y Constantes
	
	Content:
		Las variables son contenedores para almacenar valores que pueden cambiar durante la ejecución del programa. Las constantes, en cambio, son valores que no cambian y se declaran con la palabra clave `final`.
		
		**Declaración de variables:**
		```java
		int edad = 25;
		String nombre = "Juan";
		```
		
		**Declaración de constantes:**
		```java
		final double PI = 3.14159;
		```
		
	Header: Operadores Básicos en Java
	Subheader: Operadores Aritméticos
	
	Content:
		Java soporta los operadores aritméticos básicos que permiten realizar operaciones matemáticas:
		
		* **Suma**: `+`
		* **Resta**: `-`
		* **Multiplicación**: `*`
		* **División**: `/`
		* **Módulo** (residuo de la división): `%`
		
		**Ejemplo de uso de operadores aritméticos:**
		```java
		int suma = 5 + 3;
		int resta = 10 - 4;
		int producto = 2 * 6;
		int cociente = 20 / 4;
		int residuo = 10 % 3;
		```

	Subheader: Operadores de Asignación
	
	Content:
		Los operadores de asignación en Java se utilizan para asignar valores a las variables:
		
		* **Asignación simple**: `=`
		* **Asignación compuesta**:
			- `+=`: Suma y asigna
			- `-=`: Resta y asigna
			- `*=`: Multiplica y asigna
			- `/=`: Divide y asigna
			- `%=`: Calcula el módulo y asigna
		
		**Ejemplo de operadores de asignación:**
		```java
		int a = 5;
		a += 2; // a ahora es 7
		a *= 3; // a ahora es 21
		```

	Code:
		// Código que muestra un uso combinado de operadores y variables
		public class Operadores {
		    public static void main(String[] args) {
		        int x = 10;
		        int y = 5;
		        int resultado = x * y + (x - y);
		        System.out.println("El resultado es: " + resultado);
		    }
		}

	Header: Estructura de Control de Flujo Básica
	Subheader: Condicionales
	
	Content:
		Los condicionales permiten ejecutar bloques de código basados en condiciones booleanas:
		
		* **`if`**: Ejecuta un bloque de código si la condición es verdadera.
		* **`else`**: Se ejecuta si la condición del `if` es falsa.
		* **`else if`**: Evalúa una nueva condición si la anterior es falsa.
		
		**Ejemplo de condicionales:**
		```java
		int numero = 10;
		if (numero > 0) {
		    System.out.println("El número es positivo");
		} else if (numero < 0) {
		    System.out.println("El número es negativo");
		} else {
		    System.out.println("El número es cero");
		}
		```

	Subheader: Bucles Básicos
	
	Content:
		Los bucles permiten repetir bloques de código mientras una condición sea verdadera:
		
		* **`for`**: Repite un bloque de código un número determinado de veces.
		* **`while`**: Repite un bloque de código mientras la condición sea verdadera.
		* **`do-while`**: Similar al `while`, pero la condición se evalúa después de ejecutar el bloque de código.
		
		**Ejemplo de bucle `for`:**
		```java
		for (int i = 0; i < 5; i++) {
		    System.out.println("Iteración: " + i);
		}
		```

	Header: Entrada y Salida Básica en Java
	Subheader: Uso de `System.out.println` y `Scanner`
	
	Content: 
		Para interactuar con el usuario, Java utiliza clases como `System.out` para salida en consola y `Scanner` para entrada de datos:
		
		**Ejemplo de entrada y salida:**
		```java
		import java.util.Scanner;

		public class EntradaSalida {
		    public static void main(String[] args) {
		        Scanner scanner = new Scanner(System.in);
		        System.out.print("Introduce tu nombre: ");
		        String nombre = scanner.nextLine();
		        System.out.println("Hola, " + nombre + "!");
		    }
		}
		```

	Content:
		Con esta estructura básica de sintaxis, estás listo para comenzar a escribir programas sencillos en Java. Los siguientes temas cubrirán operadores y estructuras de control más detalladamente.
		
	**Recursos adicionales:**
	* [Documentación oficial de Java](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/index.html)

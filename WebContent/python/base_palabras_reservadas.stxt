Tema(www.cursos.com/tema.stxt):

	h1: Palabras reservadas
	
	Text: 
	    | Palabra | Uso |
	    | --------| ----|
		| ```True```              | Representa el valor booleano verdadero.                            |
	    | ```False```             | Representa el valor booleano falso.                                |
	    | ```None```              | Representa la ausencia de valor o un valor nulo.                    |
	    | ```and```               | Operador lógico que devuelve True si ambas expresiones son verdaderas. |
	    | ```as```                | Se usa para crear un alias, por ejemplo, en la importación de módulos. |
	    | ```assert```            | Se usa para fines de depuración, para comprobar si una condición es verdadera. |
	    | ```async```             | Declara una función asíncrona.                                     |
	    | ```await```             | Se usa para esperar el resultado de una llamada asíncrona.         |
	    | ```break```             | Termina el bucle actual.                                           |
	    | ```class```             | Declara una nueva clase.                                           |
	    | ```continue```          | Salta a la siguiente iteración de un bucle.                        |
	    | ```def```               | Declara una nueva función.                                         |
	    | ```del```               | Elimina un objeto.                                                 |
	    | ```elif```              | Se usa en declaraciones condicionales, abreviatura de "else if".   |
	    | ```else```              | Se usa en declaraciones condicionales para definir una acción alternativa si la condición es falsa. |
	    | ```except```            | Se usa en bloques try para manejar excepciones.                    |
	    | ```finally```           | Se usa en bloques try para especificar código que se ejecutará independientemente de si ocurre una excepción o no. |
	    | ```for```               | Se usa para crear un bucle que itera sobre una secuencia.          |
	    | ```from```              | Se usa para importar una parte específica de un módulo.            |
	    | ```global```            | Declara una variable global.                                       |
	    | ```if```                | Declara una condición.                                             |
	    | ```import```            | Importa módulos en el programa.                                    |
	    | ```in```                | Verifica si un valor está presente en una secuencia.               |
	    | ```is```                | Comprueba si dos variables apuntan al mismo objeto.                |
	    | ```lambda```            | Declara una función anónima.                                       |
	    | ```nonlocal```          | Declara una variable no local.                                     |
	    | ```not```               | Operador lógico que invierte el valor de una expresión.            |
	    | ```or```                | Operador lógico que devuelve True si al menos una de las expresiones es verdadera. |
	    | ```pass```              | Se usa como un marcador de posición para indicar que no se realiza ninguna acción. |
	    | ```raise```             | Lanza una excepción.                                               |
	    | ```return```            | Sale de una función y devuelve un valor.                           |
	    | ```try```               | Intenta ejecutar un bloque de código y permite manejar excepciones. |
	    | ```while```             | Crea un bucle que se ejecuta mientras una condición es verdadera.  |
	    | ```with```              | Simplifica la gestión de recursos.                                 |
	    | ```yield```             | Pausa una función y devuelve un valor del generador.               |

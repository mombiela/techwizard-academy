Document (globalcampus.site/namespace.stxt): Promesas y Asincronía
	Navigation:
		Previous: Introducción a jQuery (15-introduccion-jquery)
		Next: AJAX y Fetch API (17-ajax-fetch-api)
	Header: Promesas y Asincronía en JavaScript
	Subheader: Introducción a la programación asincrónica
	
	Content:
		La programación asincrónica permite que las operaciones que toman tiempo, como solicitudes de red o lecturas de archivos, 
		no bloqueen la ejecución del programa. En lugar de esperar a que estas operaciones se completen, JavaScript continúa ejecutando el código, 
		y maneja el resultado de las operaciones asincrónicas cuando están listas.

		JavaScript utiliza varios enfoques para manejar la asincronía, siendo las **promesas** y la sintaxis `async/await` las más comunes.

	Code:
		// Ejemplo básico de código asincrónico usando setTimeout
		console.log("Inicio");

		setTimeout(() => {
			console.log("Esto se ejecuta después de 2 segundos");
		}, 2000);

		console.log("Fin");
		// Output:
		// Inicio
		// Fin
		// Esto se ejecuta después de 2 segundos

	Subheader: ¿Qué es una promesa?
	
	Content:
		Una **promesa** es un objeto que representa la eventual finalización (o falla) de una operación asincrónica y su valor resultante. 
		Una promesa puede estar en uno de los siguientes estados:

		* **Pending** (pendiente): Estado inicial, ni cumplida ni rechazada.
		* **Fulfilled** (cumplida): La operación se completó con éxito.
		* **Rejected** (rechazada): La operación falló.

		Las promesas proporcionan métodos `then()` y `catch()` para manejar los resultados cuando la promesa se cumple o se rechaza, respectivamente.

	Code:
		// Ejemplo básico de una promesa
		let miPromesa = new Promise((resolve, reject) => {
			let exito = true;

			if (exito) {
				resolve("¡Operación exitosa!");
			} else {
				reject("Algo salió mal.");
			}
		});

		miPromesa
			.then((mensaje) => {
				console.log(mensaje); // Output: ¡Operación exitosa!
			})
			.catch((error) => {
				console.log(error);
			});

	Subheader: Encadenamiento de promesas
	
	Content:
		Las promesas pueden ser encadenadas para manejar secuencias de operaciones asincrónicas. 
		Cada `then()` devuelve una nueva promesa, lo que permite continuar la cadena de operaciones.

	Code:
		// Ejemplo de encadenamiento de promesas
		let promesaEncadenada = new Promise((resolve, reject) => {
			resolve(5);
		});

		promesaEncadenada
			.then((numero) => {
				console.log(numero); // Output: 5
				return numero * 2;
			})
			.then((doble) => {
				console.log(doble); // Output: 10
				return doble * 3;
			})
			.then((triple) => {
				console.log(triple); // Output: 30
			});

	Subheader: Manejo de errores con promesas
	
	Content:
		El manejo de errores en las promesas se realiza utilizando el método `catch()`. 
		Si alguna promesa en la cadena falla, el control pasa al primer `catch()` encontrado.

	Code:
		// Ejemplo de manejo de errores con promesas
		let promesaConError = new Promise((resolve, reject) => {
			let exito = false;

			if (exito) {
				resolve("¡Todo salió bien!");
			} else {
				reject("Hubo un error.");
			}
		});

		promesaConError
			.then((mensaje) => {
				console.log(mensaje);
			})
			.catch((error) => {
				console.log("Error:", error); // Output: Error: Hubo un error.
			});

	Subheader: Async y Await
	
	Content:
		La sintaxis `async/await` es una forma más limpia y legible de trabajar con código asincrónico, 
		basada en promesas. Cuando se declara una función como `async`, se puede usar `await` dentro de esa función para pausar la ejecución 
		hasta que una promesa sea resuelta o rechazada.

	Code:
		// Ejemplo de async/await
		async function obtenerDatos() {
			try {
				let respuesta = await fetch("https://api.example.com/datos");
				let datos = await respuesta.json();
				console.log(datos);
			} catch (error) {
				console.error("Error al obtener los datos:", error);
			}
		}

		obtenerDatos();

	Subheader: Beneficios de usar promesas y async/await
	
	Content:
		El uso de promesas y `async/await` ofrece varios beneficios clave:

		* **Legibilidad**: Hace que el código asincrónico sea más fácil de leer y entender.
		* **Manejo de errores**: Proporciona un manejo de errores más robusto y centralizado.
		* **Evita el "callback hell"**: Permite evitar la anidación excesiva de callbacks, manteniendo el código limpio.

	Code:
		// Ejemplo que combina promesas y async/await
		function esperar(ms) {
			return new Promise((resolve) => setTimeout(resolve, ms));
		}

		async function ejecutarTareas() {
			await esperar(1000);
			console.log("Tarea 1 completada después de 1 segundo");

			await esperar(2000);
			console.log("Tarea 2 completada después de 2 segundos");
		}

		ejecutarTareas();
		// Output:
		// Tarea 1 completada después de 1 segundo
		// Tarea 2 completada después de 2 segundos

Unit(globalcampus.site/namespace.stxt): Polimorfismo
	
	Text: 
	    El polimorfismo es uno de los principios fundamentales de la programación orientada a objetos (OOP) y se refiere a la capacidad de diferentes clases para ser tratadas como instancias de una misma clase a través de una interfaz común. En otras palabras, permite que una función o un método trabaje con diferentes tipos de objetos de una manera uniforme.
	    
	H1:  Polimorfismo en Python
	
	Text:
	    
	    En Python, el polimorfismo se puede lograr a través de la herencia y la implementación de métodos comunes en diferentes clases. Python es un lenguaje dinámico, lo que significa que no es necesario que las clases compartan una relación de herencia explícita para ser polimórficas; simplemente deben implementar los mismos métodos.
	    
	H1:  Polimorfismo con Herencia 
	
	Text:
	    
	    Veamos un ejemplo simple usando herencia:
	    
	Code:
	    class Animal:
	    def hacer_sonido(self):
	    raise NotImplementedError("Este método debe ser implementado por la subclase")
	    
	    class Perro(Animal):
	    def hacer_sonido(self):
	    return "Guau"
	    
	    class Gato(Animal):
	    def hacer_sonido(self):
	    return "Miau"
	    
	    def hacer_sonido_animal(animal):
	    print(animal.hacer_sonido())
	    
	    perro = Perro()
	    gato = Gato()
	    
	    hacer_sonido_animal(perro)  # Output: Guau
	    hacer_sonido_animal(gato)   # Output: Miau
	    
	
	
	Text:
	    
	    En este ejemplo, tanto ```Perro``` como ```Gato``` son subclases de ```Animal``` y ambos implementan el método ```hacer_sonido```. La función ```hacer_sonido_animal``` puede aceptar cualquier objeto que sea una instancia de ```Animal``` o sus subclases.
	    
	H1:  Polimorfismo sin Herencia (Duck Typing) 
	
	Text:
	    
	    Python es conocido por su enfoque de "duck typing", que permite el polimorfismo sin necesidad de una jerarquía de clases explícita. Si un objeto implementa los métodos necesarios, se puede usar de manera polimórfica.
	    
	Code:
	    class Perro:
	    def hacer_sonido(self):
	    return "Guau"
	    
	    class Gato:
	    def hacer_sonido(self):
	    return "Miau"
	    
	    class Vaca:
	    def hacer_sonido(self):
	    return "Muu"
	    
	    def hacer_sonido_animal(animal):
	    print(animal.hacer_sonido())
	    
	    perro = Perro()
	    gato = Gato()
	    vaca = Vaca()
	    
	    hacer_sonido_animal(perro)  # Output: Guau
	    hacer_sonido_animal(gato)   # Output: Miau
	    hacer_sonido_animal(vaca)   # Output: Muu
	
	
	Text:
	    
	    Aquí, ```Perro```, ```Gato``` y ```Vaca``` no comparten una clase base común, pero todos tienen el método ```hacer_sonido```. La función ```hacer_sonido_animal``` puede trabajar con cualquier objeto que implemente este método.
	    
	H1:  Ejemplo de Polimorfismo en Funciones y Métodos 
	
	Text:
	    
	    El polimorfismo también se puede observar en funciones y métodos que aceptan parámetros de diferentes tipos.
	    
	Code:
	    def agregar(a, b):
	    return a + b
	    
	    print(agregar(5, 3))           # Output: 8
	    print(agregar("Hola, ", "mundo"))  # Output: Hola, mundo
	    
	
	
	Text:
	    
	    En este caso, la función ```agregar``` se comporta de manera polimórfica porque puede sumar tanto números como concatenar cadenas de texto, dependiendo del tipo de los argumentos.
	    
	H1:  Resumen 
	
	Text:
	    
	    * **Polimorfismo**: Permite que diferentes clases sean tratadas de manera uniforme a través de una interfaz común.
	    * **Herencia**: Facilita el polimorfismo al permitir que las subclases implementen métodos de una clase base.
	    * **Duck Typing**: Permite el polimorfismo sin una jerarquía de clases explícita, basándose en la presencia de métodos específicos.
	    * **Funciones y métodos**: Pueden comportarse de manera polimórfica aceptando diferentes tipos de argumentos y actuando en consecuencia.
	    
	    El polimorfismo es una herramienta poderosa en OOP que permite escribir código más flexible y reutilizable, al permitir que funciones y métodos operen sobre diferentes tipos de objetos de manera uniforme.

Document (globalcampus.site/namespace.stxt): Bucles (for, while)
	
	Content: 
	    Los bucles en Python se utilizan para repetir un bloque de código varias veces.
	    Python soporta principalmente dos tipos de bucles: **for** y **while**.
	    
	Header:  Bucle for 
	
	Content:
	    
	    El bucle ```for``` en Python se utiliza para iterar sobre
	    una secuencia (como una lista, una tupla, un diccionario,
	    un conjunto o una cadena de caracteres). A medida que itera,
	    el bucle ejecuta el bloque de código para cada elemento en la secuencia.
	    
	Header:  Sintaxis: 
	
	Content:
	    
	Code:
	    for variable in secuencia:
	    # bloque de código
	
	
	Content:
	    
	Header:  Ejemplo: 
	
	Content:
	    
	Code:
	    frutas = ["manzana", "banana", "cereza"]
	    for fruta in frutas:
	    print(fruta)
	
	
	Content:
	    
	    En este ejemplo, el bucle ```for``` iterará sobre
	    cada elemento de la lista ```frutas``` y imprimirá cada fruta.
	    
	Header:  Uso de range() en for:
	
	Content:
	    
	    El método ```range()``` se usa a menudo
	    con ```for``` para generar una secuencia de números.
	    
	Header:  Ejemplo:
	
	Content:
	    
	Code:
	    for i in range(5):
	    print(i)
	
	
	Content:
	    
	    Este bucle imprimirá los números del 0 al 4.
	    
	Header:  Bucle while 
	
	Content:
	    
	    El bucle ```while``` ejecuta el bloque de código
	    mientras la condición especificada sea verdadera (```True```).
	    
	Header:  Sintaxis:
	
	Content:
	    
	Code:
	    while condición:
	    # bloque de código
	
	
	Content:
	    
	Header:  Ejemplo:
	
	Content:
	    
	Code:
	    i = 0
	    while i < 5:
	    print(i)
	    i += 1
	
	
	Content:
	    
	    En este ejemplo, el bucle ```while``` continuará
	    ejecutándose mientras ```i``` sea menor que ```5```.
	    Después de cada iteración, ```i``` se incrementa en 1.
	    
	Header:  Control de bucles 
	
	Content:
	    
	    Python proporciona varias sentencias
	    para controlar el flujo de los bucles:
	    
	    * **break**: Termina el bucle inmediatamente.
	    * **continue**: Salta a la siguiente iteración del bucle.
	    * **else**: Ejecuta un bloque de código
	    al final del bucle, a menos que se haya terminado con ```break```.
	    
	Header:  Ejemplo de break:
	
	Content:
	    
	Code:
	    for i in range(10):
	    if i == 5:
	    break
	    print(i)
	
	
	Content:
	    
	    Este bucle imprimirá los números del 0 al 4
	    y luego se detendrá cuando ```i``` sea igual a 5.
	    
	Header:  Ejemplo de continue:
	
	Content:
	    
	Code:
	    for i in range(10):
	    if i % 2 == 0:
	    continue
	    print(i)
	
	
	Content:
	    
	    Este bucle imprimirá los números impares del 0 al 9,
	    ya que ```continue``` hace que el bucle salte a la
	    siguiente iteración cuando ```i``` es par.
	    
	Header:  Ejemplo de else en bucles:
	
	Content:
	    
	Code:
	    for i in range(5):
	    print(i)
	    else:
	    print("El bucle ha terminado")
	
	
	Content:
	    
	    Este bucle imprimirá los números del 0 al 4 y
	    luego imprimirá "El bucle ha terminado".
	    
	Header:  Combinando bucles for y while:
	
	Content:
	    
	    A veces, puedes necesitar combinar bucles ```for```
	    y ```while``` para resolver problemas más complejos.
	    
	Header:  Ejemplo:
	
	Content:
	    
	Code:
	    while True:
	    entrada = input("Escribe 'salir' para terminar: ")
	    if entrada == 'salir':
	    break
	    for letra in entrada:
	    print(letra)
	
	
	Content:
	    
	    En este ejemplo, el bucle ```while``` continuará
	    ejecutándose hasta que el usuario escriba "salir".
	    Para cada entrada del usuario, el bucle ```for```
	    imprimirá cada letra de la entrada.
	    
	Header:  Importancia de la indentación 
	
	Content:
	    
	    Es crucial recordar que Python usa la indentación para
	    definir bloques de código. Asegúrate de que todas las
	    líneas de código dentro de un bucle estén correctamente indentadas.
	    
	Code:
	    for i in range(5):
	    print("Inicio del bucle")
	    if i % 2 == 0:
	    print(f"{i} es par")
	    print("Fin del bucle")
	
	
	Content:
	    
	    En resumen, los bucles ```for``` y ```while``` en Python son
	    herramientas poderosas para repetir la ejecución de bloques de código.
	    Entender cómo y cuándo usarlos es esencial para
	    escribir programas efectivos y eficientes.
	    
	    
	    
	    
	    

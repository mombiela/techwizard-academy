Document (globalcampus.site/namespace.stxt): Comprensiones de listas
	
	Text: 
	    Las comprensiones de listas en Python son una forma concisa y
	    elegante de crear listas. Permiten generar una nueva lista
	    aplicando una expresión a cada elemento de una secuencia
	    (como una lista, tupla o cualquier otro iterable) y,
	    opcionalmente, filtrando elementos con una condición.
	    
	Header:  Sintaxis Básica
	
	Text:
	    
	    La sintaxis básica de una comprensión de lista es la siguiente:
	    
	Code:
	    [nueva_lista] = [expresión for elemento in iterable if condición]
	
	
	Text:
	    
	    * **expresión**: Operación que se realiza sobre cada elemento de la secuencia.
	    * **elemento**: Variable que toma el valor de cada uno de los elementos del iterable.
	    * **iterable**: La secuencia de datos que se recorre.
	    * **condición (opcional)**: Filtro que determina si un elemento se incluye en la nueva lista.
	    
	Header:  Ejemplos de Comprensiones de Listas 
	
	Text:
	    
	    **1. Crear una lista de números:**
	    
	Code:
	    numeros = [1, 2, 3, 4, 5]
	    cuadrados = [n ** 2 for n in numeros]
	    print(cuadrados)  # Salida: [1, 4, 9, 16, 25]
	
	
	Text:
	    
	    En este ejemplo, ```n ** 2``` es la expresión que se aplica
	    a cada elemento ```n``` de la lista ```numeros```.
	    
	    **2. Filtrar elementos con una condición:**
	    
	Code:
	    numeros = [1, 2, 3, 4, 5]
	    pares = [n for n in numeros if n % 2 == 0]
	    print(pares)  # Salida: [2, 4]
	
	
	Text:
	    
	    Aquí, ```n % 2 == 0``` es la condición que filtra los números pares de la lista ```numeros```.
	    
	    **3. Aplicar una función a cada elemento:**
	    
	Code:
	    def cuadrado(n):
	    return n ** 2
	    
	    numeros = [1, 2, 3, 4, 5]
	    cuadrados = [cuadrado(n) for n in numeros]
	    print(cuadrados)  # Salida: [1, 4, 9, 16, 25]
	
	
	Text:
	    
	    En este ejemplo, la función cuadrado se aplica a cada elemento de la lista ```numeros```.
	    
	    **4. Convertir caracteres a mayúsculas:**
	    
	Code:
	    frutas = ["manzana", "banana", "cereza"]
	    mayusculas = [fruta.upper() for fruta in frutas]
	    print(mayusculas)  # Salida: ['MANZANA', 'BANANA', 'CEREZA']
	
	
	Text:
	    
	    La expresión ```fruta.upper()``` convierte cada cadena de la lista ```frutas``` a mayúsculas.
	    
	Header:  Comprensiones Anidadas 
	
	Text:
	    
	    Las comprensiones de listas también pueden ser anidadas, permitiendo crear listas multidimensionales.
	    
	Header:  Ejemplo: Matriz de números:
	
	Text:
	    
	Code:
	    matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
	    transpuesta = [[fila[i] for fila in matriz] for i in range(len(matriz[0]))]
	    print(transpuesta)  # Salida: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
	
	
	Text:
	    
	    En este ejemplo, la lista ```transpuesta``` se genera tomando los elementos por columna en lugar de por fila.
	    
	Header:  Uso de Comprensiones de Listas con Diccionarios y Conjuntos 
	
	Text:
	    
	    Las comprensiones de listas no se limitan solo a listas. También pueden usarse para crear diccionarios y conjuntos.
	    
	Header:  Ejemplo con diccionarios:
	
	Text:
	    
	Code:
	    frutas = ["manzana", "banana", "cereza"]
	    precios = [1.2, 0.5, 2.0]
	    frutas_precios = {fruta: precio for fruta, precio in zip(frutas, precios)}
	    print(frutas_precios)  # Salida: {'manzana': 1.2, 'banana': 0.5, 'cereza': 2.0}
	
	
	Text:
	    
	    En este ejemplo, se crea un diccionario ```frutas_precios``` a partir de dos listas usando ```zip```.
	    
	Header:  Ejemplo con conjuntos:
	
	Text:
	    
	Code:
	    numeros = [1, 2, 2, 3, 4, 4, 5]
	    cuadrados_unicos = {n ** 2 for n in numeros}
	    print(cuadrados_unicos)  # Salida: {1, 4, 9, 16, 25}
	
	
	Text:
	    
	    En este ejemplo, se crea un conjunto ```cuadrados_unicos``` con los cuadrados únicos de los números en la lista ```numeros```.
	    
	    Las comprensiones de listas son una herramienta poderosa para escribir código más claro y conciso. Facilitan la creación y manipulación de listas de una manera legible y eficiente.
	    
	    
	    

Unit(globalcampus.site/namespace.stxt): Strings
	
	Text: 
	h2: Strings en Python
	
	Text:
	    
	    Los strings (cadenas de texto) en Python son secuencias de caracteres inmutables. Esto significa que una vez creado un string, no se puede modificar. Los strings se utilizan para almacenar y manipular texto.
	    
	h2: Creación de Strings
	
	Text:
	    
	    Los strings se pueden crear usando comillas simples ```''```, comillas dobles ```""``` o triples comillas ```''' '''``` o ```""" """``` para strings multilínea.
	    
	    Ejemplos:
	Code:
	    mi_string = 'Hola, mundo'
	    otro_string = "Python es genial"
	    multilinea = '''Esto es un string
	    multilínea'''
	
	
	Text:
	    
	h2: Acceso a Caracteres
	
	Text:
	    
	    Los caracteres de un string se pueden acceder mediante índices, comenzando desde 0.
	    
	    Ejemplo:
	Code:
	    primer_caracter = mi_string[0]
	    ultimo_caracter = mi_string[-1]
	
	
	Text:
	    
	h2: Substrings
	
	Text:
	    
	    Se pueden obtener substrings usando slicing (rebanado).
	    
	    Ejemplo:
	Code:
	    substring = mi_string[0:4] # 'Hola'
	
	
	Text:
	    
	h2: Concatenación de Strings
	
	Text:
	    
	    Los strings se pueden concatenar usando el operador ```+```.
	Code:
	    saludo = 'Hola, ' + 'mundo'
	
	
	Text:
	    
	    También se pueden repetir usando el operador ``````.
	Code:
	    repetir = 'Hola'  3 # 'HolaHolaHola'
	
	
	Text:
	    
	h2: Métodos de Strings
	
	Text:
	    
	    *  ```upper```: Convierte todos los caracteres a mayúsculas.
	Code:
	    mayusculas = mi_string.upper()
	
	
	Text:
	    
	    *  ```lower```: Convierte todos los caracteres a minúsculas.
	Code:
	    minusculas = mi_string.lower()
	
	
	Text:
	    
	    *  ```strip```: Elimina los espacios en blanco al inicio y al final del string.
	Code:
	    espacios = '    Hola, mundo    '
	    sin_espacios = espacios.strip()
	
	
	Text:
	    
	    *  ```replace```: Reemplaza todas las ocurrencias de un substring por otro.
	Code:
	    nuevo_string = mi_string.replace('mundo', 'Python')
	
	
	Text:
	    
	    *  ```split```: Divide el string en una lista de substrings basándose en un delimitador.
	Code:
	    lista_palabras = mi_string.split(' ') # ['Hola,', 'mundo']
	
	
	Text:
	    
	    *  ```join```: Une una lista de strings en un solo string, usando un delimitador.
	Code:
	    palabras = ['Hola,', 'mundo']
	    frase = ' '.join(palabras)
	
	
	Text:
	    
	h2: Formateo de Strings
	
	Text:
	    
	    *  ```f-strings```: Permiten insertar expresiones dentro de un string, utilizando llaves ```{}```.
	Code:
	    nombre = 'Juan'
	    edad = 30
	    frase = f'Hola, me llamo {nombre} y tengo {edad} años.'
	
	
	Text:
	    
	    *  ```str.format```: Inserta valores en posiciones específicas usando llaves ```{}```.
	Code:
	    frase = 'Hola, me llamo {} y tengo {} años.'.format(nombre, edad)
	
	
	Text:
	    
	    *  **Operador %**: Formatea strings usando el operador ```%```.
	Code:
	    frase = 'Hola, me llamo %s y tengo %d años.' % (nombre, edad)
	
	
	Text:
	    
	h2: Operaciones Comunes
	
	Text:
	    
	    *  **Comprobación de Membresía**: Se puede verificar si un substring está en un string usando ```in```.
	Code:
	    existe = 'Python' in mi_string
	
	
	Text:
	    
	    *  **Longitud del String**: Se puede obtener la longitud de un string usando ```len()```.
	Code:
	    longitud = len(mi_string)
	
	
	Text:
	    
	    *  **Iteración**: Se puede iterar sobre los caracteres de un string usando un bucle ```for```.
	Code:
	    for caracter in mi_string:
	    print(caracter)
	
	
	Text:
	    
	h2: Strings Multilínea
	
	Text:
	    
	    Los strings multilínea se crean usando triples comillas y permiten el uso de saltos de línea dentro del string.
	    
	    Ejemplo:
	Code:
	    multilinea = """Esto es un string
	    multilínea
	    que permite saltos de línea"""
	
	
	Text:
	    
	h2: Ventajas de los Strings
	
	Text:
	    
	    *  **Inmutabilidad**: Proporciona seguridad y eficiencia en el manejo de datos.
	    *  **Versatilidad**: Pueden ser utilizados en una amplia variedad de contextos, desde mensajes simples hasta formateo avanzado.
	    *  **Compatibilidad con Unicode**: Soportan caracteres Unicode, permitiendo el uso de una amplia gama de caracteres y símbolos.

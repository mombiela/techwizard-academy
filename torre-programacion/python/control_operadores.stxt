Document (globalcampus.site/namespace.stxt): Operadores en Python 
	
	Header: Operadores Aritméticos
	
	Content: 
	    Estos operadores se utilizan para realizar operaciones matemáticas comunes.
	    
	    | Operador     | Descripción     |Ejemplo    |
	    | -------------|-----------------|-----------|
	    | ```+```   | Suma            | ```a + b``` |
	    | ```-```   | Resta           | ```a - b``` |
	    | ```*```   | Multiplicación  | ```a * b``` |
	    | ```/```   | División        | ```a / b``` |
	    | ```%```   | Módulo          | ```a % b``` |
	    | ```**```  | Exponenciación  | ```a ** b``` |
	    | ```//```  | División entera | ```a // b``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = 10
	    b = 3
	    print(a + b)  # 13
	    print(a - b)  # 7
	    print(a * b)  # 30
	    print(a / b)  # 3.3333333333333335
	    print(a % b)  # 1
	    print(a ** b) # 1000
	    print(a // b) # 3
	

	Header: Operadores de Asignación
	
	Content: 
	    Estos operadores se utilizan para asignar valores a las variables.
	    
	    | Operador    | Descripción                 | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```=```   | Asignación                   | ```a = 5``` |
	    | ```+=```  | Suma y asignación            | ```a += 3``` |
	    | ```-=```  | Resta y asignación           | ```a -= 3``` |
	    | ```*=```  | Multiplicación y asignación  | ```a *= 3``` |
	    | ```/=```  | División y asignación        | ```a /= 3``` |
	    | ```%=```  | Módulo y asignación          | ```a %= 3``` |
	    | ```//=``` | División entera y asignación | ```a //= 3``` |
	    | ```**=``` | Exponenciación y asignación  | ```a **= 3``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = 5
	    a += 2  # a = a + 2
	    print(a)  # 7
	    a *= 3  # a = a * 3
	    print(a)  # 21

	Header: Operadores de Comparación
	
	Content: 
	    Estos operadores se utilizan para comparar dos valores.
	    
	    | Operador    | Descripción     | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```==``` | Igual a           | ```a == b``` |
	    | ```!=``` | No igual a        | ```a != b``` |
	    | ```>```  | Mayor que         | ```a > b``` |
	    | ```<```  | Menor que         | ```a < b``` |
	    | ```>=``` | Mayor o igual que | ```a >= b``` |
	    | ```<=``` | Menor o igual que | ```a <= b``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = 5
	    b = 3
	    print(a == b)  # False
	    print(a != b)  # True
	    print(a > b)   # True
	    print(a < b)   # False

	Header: Operadores Lógicos
	
	Content: 
	    Estos operadores se utilizan para combinar sentencias condicionales.
	    
	    | Operador    | Descripción                 | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```and``` | Y lógico        | ```a and b``` |
	    | ```or```  | O lógico        | ```a or b``` |
	    | ```not``` | Negación lógica | ```not a``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = True
	    b = False
	    print(a and b)  # False
	    print(a or b)   # True
	    print(not a)    # False
	

	Header: Operadores de Identidad
	
	Content: 
	    Estos operadores se utilizan para comparar objetos.
	    
	    | Operador    | Descripción                 | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```is```     | Es el mismo objeto    | ```a is b``` |
	    | ```is not``` | No es el mismo objeto | ```a is not b``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = [1, 2, 3]
	    b = a
	    c = [1, 2, 3]
	    print(a is b)    # True
	    print(a is c)    # False
	    print(a is not c) # True

	Header: Operadores de Pertenencia
	
	Content: 
	    Estos operadores se utilizan para verificar si un valor o variable está presente en una secuencia (como una lista, tupla, diccionario, etc.).
	    
	    | Operador    | Descripción                 | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```in```     | Está presente en    | ```a in b``` |
	    | ```not``` in | No está presente en | ```a not in b``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = [1, 2, 3]
	    print(2 in a)     # True
	    print(4 not in a) # True

	Header: Operadores Bit a Bit
	
	Content: 
	    Estos operadores se utilizan para comparar (operar) los números a nivel de bits.
	    
	    | Operador    | Descripción       | Ejemplo |
	    | -------------|-----------------|-----------|
	    | ```&```   | AND bit a bit      | ```a & b``` |
	    | ```|```   | OR bit a bit       | ```a | b``` |
	    | ```^```   | XOR bit a bit      | ```a ^ b``` |
	    | ``` ~ ``` | NOT bit a bit      | ``` ~a ``` |
	    | ```<<```  | Desplazamiento izq | ```a << b``` |
	    | ```>>```  | Desplazamiento der | ```a >> b``` |
	    
	Subheader: Ejemplo: 
	
	Code:
	    a = 60    # 60 = 0011 1100
	    b = 13    # 13 = 0000 1101
	    print(a & b)  # 12 = 0000 1100
	    print(a | b)  # 61 = 0011 1101
	    print(a ^ b)  # 49 = 0011 0001
	    print(~a)     # -61 = 1100 0011
	    print(a << 2) # 240 = 1111 0000
	    print(a >> 2) # 15 = 0000 1111

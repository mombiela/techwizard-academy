Document (globalcampus.site/namespace.stxt): Estructuras de control de flujo: IF, PERFORM, etc.
	
	Content: 
	    COBOL proporciona varias estructuras de control de flujo que permiten dirigir la ejecución del programa basándose en condiciones y repeticiones. Entre las más comunes se encuentran ```IF```, ```PERFORM```, ```EVALUATE``` y ```GO TO```. A continuación, se explican estas estructuras y su uso.
	    
	Header: IF
	
	Content:
	    
	    La sentencia ```IF``` se utiliza para tomar decisiones basadas en condiciones. Si la condición es verdadera, se ejecutan las sentencias especificadas; de lo contrario, se pueden ejecutar sentencias alternativas usando ```ELSE```.
	    
	Code:
	    IF WS-Total > 1000
	    DISPLAY 'Total exceeds threshold'.
	    ELSE
	    DISPLAY 'Total is within limit'.
	    END-IF.
	
	
	Content:
	    
	    En este ejemplo:
	    
	    *  ```IF WS-Total > 1000``` verifica si ```WS-Total``` es mayor que 1000.
	    *  Si la condición es verdadera, se muestra 'Total exceeds threshold'.
	    *  Si la condición es falsa, se muestra 'Total is within limit'.
	    
	Header: PERFORM
	
	Content:
	    
	    La sentencia ```PERFORM``` se utiliza para ejecutar bloques de código repetidamente o para llamar a párrafos o secciones de código.
	    
	Code:
	    PERFORM VARYING WS-Index FROM 1 BY 1 UNTIL WS-Index > 10
	    DISPLAY EmployeeID(WS-Index)
	    DISPLAY EmployeeName(WS-Index)
	    DISPLAY EmployeeSalary(WS-Index)
	    END-PERFORM.
	
	
	Content:
	    
	    En este ejemplo:
	    
	    *  ```PERFORM VARYING WS-Index FROM 1 BY 1 UNTIL WS-Index > 10``` ejecuta el bloque de código mientras ```WS-Index``` sea menor o igual a 10.
	    *  Durante cada iteración, se muestran el ```EmployeeID```, ```EmployeeName``` y ```EmployeeSalary``` correspondientes al índice actual.
	    
	    La sentencia ```PERFORM``` también se puede usar para llamar a párrafos específicos:
	    
	Code:
	    PERFORM Process-Records.
	    
	    Process-Records.
	    DISPLAY 'Processing records...'.
	    PERFORM READ-RECORD.
	    
	    READ-RECORD.
	    DISPLAY 'Reading record...'.
	
	
	Content:
	    
	    En este ejemplo:
	    
	    *  ```PERFORM Process-Records``` llama al párrafo ```Process-Records```, que a su vez llama al párrafo ```READ-RECORD```.
	    
	Header: EVALUATE
	
	Content:
	    
	    La sentencia ```EVALUATE``` es similar a un ```CASE``` o ```SWITCH``` en otros lenguajes de programación. Permite evaluar una expresión y ejecutar diferentes bloques de código basados en el valor de la expresión.
	    
	Code:
	    EVALUATE WS-Grade
	    WHEN 'A'
	    DISPLAY 'Excellent'.
	    WHEN 'B'
	    DISPLAY 'Good'.
	    WHEN 'C'
	    DISPLAY 'Average'.
	    WHEN OTHER
	    DISPLAY 'Other grade'.
	    END-EVALUATE.
	
	
	Content:
	    
	    En este ejemplo:
	    
	    *  ```EVALUATE WS-Grade``` evalúa el valor de ```WS-Grade```.
	    *  Dependiendo del valor, se muestra un mensaje correspondiente ('Excellent', 'Good', 'Average', o 'Other grade').
	    
	Header: GO TO
	
	Content:
	    
	    La sentencia ```GO TO``` transfiere el control del programa a un párrafo o sección específica. Su uso se desaconseja en programación estructurada, ya que puede dificultar la comprensión y el mantenimiento del código.
	    
	Code:
	    IF WS-Error = 'Y'
	    GO TO Error-Handler.
	
	
	Content:
	    
	    En este ejemplo:
	    
	    *  Si ```WS-Error``` es igual a 'Y', el control se transfiere al párrafo ```Error-Handler```.
	    
	Header: EXIT
	
	Content:
	    
	    La sentencia ```EXIT``` se utiliza para finalizar un bloque de código o un bucle. Es especialmente útil en programas anidados o complejos.
	    
	Code:
	    PERFORM UNTIL WS-Done
	    IF WS-Condition = 'TRUE'
	    SET WS-Done TO TRUE
	    END-IF
	    END-PERFORM.
	    EXIT.
	
	
	Content:
	    
	    En este ejemplo:
	    
	    *  El bucle ```PERFORM UNTIL WS-Done``` continúa ejecutándose hasta que ```WS-Done``` sea verdadero.
	    *  La sentencia ```EXIT``` finaliza el bloque de código.
	    
	    Las estructuras de control de flujo en COBOL son fundamentales para dirigir la ejecución del programa basándose en condiciones y repeticiones. Su uso adecuado permite escribir programas claros, eficientes y fáciles de mantener.

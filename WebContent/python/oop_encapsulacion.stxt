Tema(www.cursos.com/tema.stxt):

	h1: Encapsulación
	
	Text: 
	    La encapsulación es uno de los principios fundamentales de la programación orientada a objetos (OOP) y se refiere a la práctica de restringir el acceso directo a los datos de un objeto y permitir que estos sean manipulados solo a través de métodos definidos. En Python, la encapsulación se puede lograr utilizando convenciones de nomenclatura para los atributos y métodos de una clase.
	    
	h2:  Encapsulación en Python 
	
	Text:
	    
	    En Python, no existe un verdadero modificador de acceso como ```private``` o ```protected``` en otros lenguajes (como Java o C++). En su lugar, se utilizan convenciones de nombres para indicar la intención de acceso.
	    
	h2:  Atributos y Métodos Públicos 
	
	Text:
	    
	    Los atributos y métodos públicos están destinados a ser accesibles desde fuera de la clase. En Python, todos los atributos y métodos son públicos por defecto.
	    
	Code:
	    class MiClase:
	    def __init__(self, valor):
	    self.valor = valor
	    
	    def mostrar_valor(self):
	    print(self.valor)
	    
	    obj = MiClase(10)
	    obj.mostrar_valor()  # Output: 10
	    print(obj.valor)     # Output: 10
	
	
	Text:
	    
	h2:  Atributos y Métodos Protegidos 
	
	Text:
	    
	    Los atributos y métodos protegidos se indican con un guion bajo (`_`) al principio del nombre. Esto sugiere que no deben ser accesibles desde fuera de la clase, aunque no lo impide.
	    
	Code:
	    class MiClase:
	    def __init__(self, valor):
	    self._valor = valor
	    
	    def _mostrar_valor(self):
	    print(self._valor)
	    
	    obj = MiClase(10)
	    obj._mostrar_valor()  # Output: 10
	    print(obj._valor)     # Output: 10
	    
	
	
	Text:
	    
	    Aunque es posible acceder a ```_valor``` y ```_mostrar_valor``` desde fuera de la clase, la convención del guion bajo indica que son "protegidos" y no deben ser accedidos directamente.
	    
	h2:  Atributos y Métodos Privados 
	
	Text:
	    
	    Los atributos y métodos privados se indican con dos guiones bajos (```__```) al principio del nombre. Esto activa el name mangling, lo que hace que el nombre del atributo o método sea cambiado internamente para incluir el nombre de la clase, dificultando el acceso desde fuera de la clase.
	    
	Code:
	    class MiClase:
	    def __init__(self, valor):
	    self.__valor = valor
	    
	    def __mostrar_valor(self):
	    print(self.__valor)
	    
	    def mostrar_valor(self):
	    self.__mostrar_valor()
	    
	    obj = MiClase(10)
	    obj.mostrar_valor()  # Output: 10
	    # print(obj.__valor)  # AttributeError
	    # obj.__mostrar_valor()  # AttributeError
	
	
	Text:
	    
	    En este caso, ```__valor``` y ```__mostrar_valor``` no son accesibles directamente desde fuera de la clase. Sin embargo, todavía se puede acceder a ellos a través de la convención de name mangling:
	    
	Code:
	    print(obj._MiClase__valor)  # Output: 10
	    obj._MiClase__mostrar_valor()  # Output: 10
	
	
	Text:
	    
	    Aunque esto es posible, no es recomendable, ya que rompe la encapsulación y puede llevar a errores en el código.
	    
	h2:  Uso de Métodos Accesores y Mutadores 
	
	Text:
	    
	    Para manipular atributos encapsulados, se utilizan métodos accesores (getters) y mutadores (setters).
	    
	Code:
	    class MiClase:
	    def __init__(self, valor):
	    self.__valor = valor
	    
	    def obtener_valor(self):
	    return self.__valor
	    
	    def establecer_valor(self, valor):
	    self.__valor = valor
	    
	    obj = MiClase(10)
	    print(obj.obtener_valor())  # Output: 10
	    obj.establecer_valor(20)
	    print(obj.obtener_valor())  # Output: 20
	
	
	Text:
	    
	h2:  Propiedades 
	
	Text:
	    
	    Python ofrece una manera más elegante de trabajar con getters y setters utilizando la función ```property```.
	    
	Code:
	    class MiClase:
	    def __init__(self, valor):
	    self.__valor = valor
	    
	    @property
	    def valor(self):
	    return self.__valor
	    
	    @valor.setter
	    def valor(self, valor):
	    self.__valor = valor
	    
	    obj = MiClase(10)
	    print(obj.valor)  # Output: 10
	    obj.valor = 20
	    print(obj.valor)  # Output: 20
	
	
	Text:
	    
	h2:  Resumen 
	
	Text:
	    
	    * **Encapsulación**: Restricción del acceso directo a los datos de un objeto.
	    * **Atributos/Métodos Públicos**: Accesibles desde fuera de la clase (por defecto en Python).
	    * **Atributos/Métodos Protegidos**: Indicado con ```_```, sugiriendo que no deben ser accedidos directamente.
	    * **Atributos/Métodos Privados**: Indicado con ```__```, usando name mangling para dificultar el acceso externo.
	    * **Getters y Setters**: Métodos para acceder y modificar atributos encapsulados.
	    * **Propiedades**: Manera más elegante de trabajar con getters y setters usando la función ```property```.
	    
	    La encapsulación es una práctica fundamental para mantener la integridad de los datos y asegurar que los objetos se usen de manera controlada y predecible.
